?infoBox
runApp('prices')
runApp('prices')
runApp('prices')
runApp('prices')
runApp('prices')
runApp('prices')
runApp('prices')
runApp('prices')
shiny::runApp('subsidies/payments_direct_subsidies')
runApp('subsidies/payments_direct_subsidies')
runApp('subsidies/payments_direct_subsidies')
runApp('subsidies/payments_direct_subsidies')
runApp('subsidies/payments_direct_subsidies')
runApp('subsidies/payments_direct_subsidies')
runApp('subsidies/payments_direct_subsidies')
runApp('subsidies/payments_direct_subsidies')
runApp('country/fresh_vegetables_eu_country')
library(shiny)
library(googleVis)
library(shinythemes)
library(eurostat)
library(countrycode)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
printMoney <- function(x){ # A function to show quantity as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show quantity with k decimal places
mydata<-get_eurostat("apro_acs_a", time_format = "raw") # Downloading raw data from Eurostat
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$strucpro=='PR' & mydata$crops=='V0000'), ] # Filtering data
for (i in 1:nrow(mydata)) { # Replacing country codes in order to get correct country names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
mydata$countryname <- countrycode(mydata$geo, "iso2c", "country.name") # Getting country names
mydata<-mydata[which(!is.na(mydata$countryname)), c("countryname", "time", "values")] # Filtering for country names not found
colnames(mydata)<-c("country", "year", "quantity")
View(mydata)
runApp('subsidies/payments_direct_subsidies')
?box
runApp('subsidies/payments_direct_subsidies')
runApp('subsidies/payments_direct_subsidies')
runApp('wordcloud')
install.packages("twitteR")
runApp('wordcloud')
install.packages("wordcloud")
runApp('wordcloud')
install.packages("tm")
runApp('wordcloud')
install.packages(SnowballC)
install.packages("SnowballC")
runApp('wordcloud')
install.packages("RWeka")
runApp('wordcloud')
runApp('wordcloud')
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
?gvisColumnChart
runApp('sector/eggs_plants')
?gvisColumnChart
shiny::runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
shiny::runApp('prices')
install.packages("corrplot")
runApp('prices')
runApp('prices')
runApp('prices')
runApp('prices')
runApp('prices')
shiny::runApp('subsidies/payments_direct_subsidies')
runApp('~/Dropbox/plaisio_epidosis')
runApp('~/Dropbox/plaisio_epidosis')
runApp('~/Dropbox/plaisio_epidosis')
runApp('~/Dropbox/plaisio_epidosis')
runApp('~/Dropbox/plaisio_epidosis')
runApp('~/Dropbox/plaisio_epidosis')
runApp('~/Dropbox/plaisio_epidosis')
?infoBox
runApp('~/Dropbox/plaisio_epidosis')
runApp('~/Dropbox/plaisio_epidosis')
runApp('~/Dropbox/plaisio_epidosis')
print(source('~/Desktop/test.R')$value)
print(source('~/Desktop/test.R')$value)
print(source('~/Desktop/test.R')$value)
install.packages("rgdal")
print(source('~/Desktop/test/test.R')$value)
install.packages("gdal-config")
install.packages(c("BH", "colorspace", "countrycode", "digest", "e1071", "evaluate", "ggplot2", "ggthemes", "googleVis", "htmlwidgets", "jsonlite", "knitr", "maptools", "openssl", "Rcpp", "rgeos", "rmarkdown", "rsconnect", "rsdmx", "RWeka", "scales", "shiny", "sp", "stringr", "tidyr", "xml2", "yaml"))
install.packages(c("BH", "colorspace", "countrycode", "digest",
library(shiny); print(source('~/Desktop/test/test.R')$value)
install.packages("rgdal")
print(source('~/Desktop/test/test.R')$value)
install.packages("rgdal")
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
?addProviderTiles
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
?addPopups
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
print(source('~/Desktop/test/test.R')$value)
shiny::runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
shiny::runApp('wordcloud')
# devtools::install_github("hrbrmstr/nominatim")
source('~/Dropbox/Website/shiny/test.R')
install.packages("nominatim")
source('~/Dropbox/Website/shiny/test.R')
source('~/Dropbox/Website/shiny/test.R')
install.packages("nominatim")
ap <- available.packages()
View(ap)
source('~/Dropbox/Website/shiny/test.R')
# devtools::install_github("hrbrmstr/nominatim")
source('~/Dropbox/Website/shiny/test.R')
install.packages("DT")
source('~/Dropbox/Website/shiny/test.R')
source('~/Dropbox/Website/shiny/test.R')
source('~/Dropbox/Website/shiny/test.R')
#shape=21, size=4, alpha=1/2)
source('~/Dropbox/Website/shiny/test.R')
source('~/Dropbox/Website/shiny/test.R')
View(sea_map)
source('~/Dropbox/Website/shiny/test.R')
source('~/Dropbox/Website/shiny/test.R')
library(shiny); print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
devtools::install_github("hrbrmstr/nominatim")
devtools::install_github("hrbrmstr/nominatim")
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
?aggregate
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
?ggplot
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
?βοχ
?box
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
print(source('~/Dropbox/test/test.R')$value)
runApp('sector/eggs_plants')
?βοχ
?box
?ggplot
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
shiny::runApp('~/Dropbox/plaisio_epidosis')
install.packages("reshape")
runApp('~/Dropbox/plaisio_epidosis')
shiny::runApp('sector/eggs_plants')
>addMarkers
?addMarkers
search.packages("FAO")
install.packages("FAOSTAT")
library(FAOSTAT)
FAOsearch("agri")
?FAOsearch
?FAOsearch("Production")
FAOsearch("Production")
FAOsearch()
.LastSearch
.LastSearch[1]
FAOsearch()
FAOsearch()
.LastSearch[1]
.LastSearch
getFAO(domainnCode="IG")
?getFAO
getFAO(name = NULL, domainCode = "IG", elementCode = 6106,
itemCode = 23203)
getFAO(name = NULL, domainCode = "QC", elementCode = 5312,
itemCode = 388)
getFAO(name = "test", domainCode = "QC", elementCode = 5312,
itemCode = 388)
runApp('sector/eggs_plants')
?addMarkers
runApp('sector/eggs_plants')
library(shiny)
library(shinythemes)
library(leaflet)
library(rgdal)
library(maptools)
library(htmltools)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
plants <- readShapePoints("/home/iliastsergoulas/Dropbox/Website/shapefiles/eggs/eggs.shp")
plants_edited <- as.data.frame(plants)
plants_per_region <- plants_edited[c("region_nam", "id")]
plants_per_pref <- plants_edited[c("prefecture", "id")]
View(plants_edited)
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
source('~/Desktop/test.R')
install.packages("ggmap")
source('~/Desktop/test.R')
citation("ggmap")
?gGeoCode
??gGeoCode
source('~/Desktop/test.R')
shiny::runApp('prices')
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
?status
??status
?box
runApp('sector/eggs_plants')
?dashboardPage
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
?coord_fixed
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
runApp('sector/snails_plants')
runApp('sector/snails_plants')
runApp('region/animal_population_eu_region')
runApp('region/animal_population_eu_region')
library(shiny)
library(googleVis)
library(shinythemes)
library(eurostat)
library(countrycode)
library(ggplot2)
mydata<-get_eurostat("agr_r_animal", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$animals=='A2000' & nchar(mydata$geo)>3 & !is.na(mydata$values)), ] # Filtering data
for (i in 1:nrow(mydata)) { # Replacing country codes in order to get correct country names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
mydata<-mydata[c("geo", "time", "values")]
colnames(mydata)<-c("geo", "year", "quantity")
mymap<- merge_eurostat_geodata(data = mydata, geocolumn = "geo", # Creating geodata
resolution = "60", all_regions = FALSE, output_class = "df")
mymap$class<-with(mymap, factor(findInterval(quantity, c(-Inf, # Creating classes out of values
quantile(quantity, probs=c(0.25, .5, .75)), Inf)),
labels=c("Q1","Q2","Q3","Q4")))
mymap<-mymap[order(mymap$year, decreasing=TRUE),]
runApp('sector/wine_production_country')
runApp('country/workforce_agri_eu_country')
runApp('sector/wine_production_country')
runApp('sector/wine_production_country')
runApp('sector/bio_production_cereal_eu_country')
shiny::runApp('sector/bio_production_cereal_eu_country')
runApp('sector/milk_collection_centres')
runApp('sector/bio_production_cereal_eu_country')
runApp('sector/fresh_vegetables_eu_country')
runApp('sector/fresh_vegetables_eu_country')
runApp('sector/fresh_vegetables_eu_country')
runApp('sector/bio_production_cereal_eu_country')
runApp('sector/bio_production_cereal_eu_country')
runApp('sector/fresh_vegetables_eu_country')
runApp('sector/fresh_vegetables_eu_country')
runApp('sector/bio_production_cereal_eu_country')
runApp('sector/bio_production_cereal_eu_country')
runApp('sector/bio_production_cereal_eu_country')
runApp('sector/bio_production_vegetables_eu_country')
shiny::runApp('sector/bio_production_vegetables_eu_country')
runApp('sector/bio_production_cereal_eu_country')
shiny::runApp('sector/bio_production_cereal_eu_country')
runApp('sector/fresh_vegetables_eu_country')
runApp('sector/cereal_eu_country')
shiny::runApp('region/animal_population_eu_region')
devtools::install_github("ropengov/eurostat")
devtools::install_github("ropengov/eurostat")
install.packages("eurostat")
shiny::runApp('region/animal_population_eu_region')
test<-curl_fetch_memory("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91;-122.48,37.73?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw")
library(curl)
test<-curl_fetch_memory("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91;-122.48,37.73?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw")
?curl_fetch_memory
?curl_download
test<-curl_download("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91;-122.48,37.73?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw", tempfile())
test<-curl("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91;-122.48,37.73?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw")
open(con)
open(test)
open(test)
print(test)
open(test)
ΤΕΣΤ
test
out <- readLines(test, n = 3)
test<-curl("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91;-122.48,37.73?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw")
open(test)
devtools:install_github("curl")
install.packages("devtools")
test<-curl("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91;-122.48,37.73?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw")
open(test)
test<-curl("curl "https://api.mapbox.com/directions-matrix/v1/mapbox/cycling/-122.42,37.78;-122.45,37.91;-122.48,37.73?sources=0;2&destinations=all&access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw")
test<-curl("https://api.mapbox.com/directions-matrix/v1/mapbox/cycling/-122.42,37.78;-122.45,37.91;-122.48,37.73?sources=0;2&destinations=all&access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw")
open(test)
test<-curl("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw")
open(test)
test<-curl("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw", handle = curl::new_handle("useragent" = "Mozilla/5.0"))
open(test)
test<-curl_download("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw", 'mirrors.csv')
test<-curl_download("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78;-122.45,37.91?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw", 'mirrors.csv')
test<-curl_download("https://api.mapbox.com/directions-matrix/v1/mapbox/driving/-122.42,37.78-122.45,37.91?access_token=pk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNpenZmcm11YjAwMGQyd2x1Nm9nd2pqcGUifQ.1PZaOWTVajnQZGeBb_x1Bw", 'mirrors.csv')
test<-curl_download("http://www.minagric.gr/images/stories/docs/agrotis/kthn_egkatastaseis/MLK_COLECTION_CENTERS_310816.xls")
test<-curl_download("http://www.minagric.gr/images/stories/docs/agrotis/kthn_egkatastaseis/MLK_COLECTION_CENTERS_310816.xls", "mirrors.csv")
test<-curl("http://www.minagric.gr/images/stories/docs/agrotis/kthn_egkatastaseis/MLK_COLECTION_CENTERS_310816.xls")
open(test)
test<-curl("https://api.mapbox.com/directions-matrix/v1/mapbox/cycling/-122.42,37.78;-122.45,37.91;-122.48,37.73?sources=0;2&destinations=all&access_token=sk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNqMGdzODk4ajAwMnkyd28zdHpnNWdqYTMifQ.7qy9msSNINIDIZxCBi4_vQ")
library(curl)
test<-curl("https://api.mapbox.com/directions-matrix/v1/mapbox/cycling/-122.42,37.78;-122.45,37.91;-122.48,37.73?sources=0;2&destinations=all&access_token=sk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNqMGdzODk4ajAwMnkyd28zdHpnNWdqYTMifQ.7qy9msSNINIDIZxCBi4_vQ")
open(test)
?RCurl
??Rcurl
library(Rcurl)
library(RCurl)
if(url.exists("https://api.mapbox.com/directions-matrix/v1/mapbox/cycling/-122.42,37.78;-122.45,37.91;-122.48,37.73?sources=0;2&destinations=all&access_token=sk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNqMGdzODk4ajAwMnkyd28zdHpnNWdqYTMifQ.7qy9msSNINIDIZxCBi4_vQ")) {
h = basicTextGatherer()
curlPerform(url = "https://api.mapbox.com/directions-matrix/v1/mapbox/cycling/-122.42,37.78;-122.45,37.91;-122.48,37.73?sources=0;2&destinations=all&access_token=sk.eyJ1IjoiaWxpdHNlIiwiYSI6ImNqMGdzODk4ajAwMnkyd28zdHpnNWdqYTMifQ.7qy9msSNINIDIZxCBi4_vQ", writefunction = h$update)
# Now read the text that was cumulated during the query response.
h$value()
}
h
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
source('~/Desktop/test.R')
library(curl)
test<-curl_fetch_memory("http://www.minagric.gr/images/stories/docs/agrotis/kthn_egkatastaseis/kentra_sysk_typ_avgwn170317.xls")
install.packages("curl")
install.packages("curl")
?rcurl
?RCurl
?Rcurl
# This R script is created as a Shiny application to generate a wordcloud out of tweets
# of Greek agricultural press.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(twitteR)
library(openssl)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
# Setting twitter credentials
credentials<-read.table("/home/iliastsergoulas/Dropbox/Website/shiny/wordcloud/credentials.txt")
setup_twitter_oauth(as.character(credentials[1,1]), as.character(credentials[2,1]),
as.character(credentials[3,1]), as.character(credentials[4,1]))
# This R script is created as a Shiny application to generate a wordcloud out of tweets
# of Greek agricultural press.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(twitteR)
library(openssl)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
# Setting twitter credentials
credentials<-read.table("/home/iliastsergoulas/Dropbox/Website/shiny/wordcloud/credentials.txt")
setup_twitter_oauth(as.character(credentials[1,1]), as.character(credentials[2,1]),
as.character(credentials[3,1]), as.character(credentials[4,1]))
# This R script is created as a Shiny application to generate a wordcloud out of tweets
# of Greek agricultural press.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(twitteR)
library(openssl)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
# Setting twitter credentials
credentials<-read.table("/home/iliastsergoulas/Dropbox/Website/shiny/wordcloud/credentials.txt")
setup_twitter_oauth(as.character(credentials[1,1]), as.character(credentials[2,1]),
as.character(credentials[3,1]), as.character(credentials[4,1]))
shiny::runApp('wordcloud')
