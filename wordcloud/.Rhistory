df2 <- do.call("rbind", lapply(rdmTweets2, as.data.frame))
df3 <- do.call("rbind", lapply(rdmTweets3, as.data.frame))
df4 <- do.call("rbind", lapply(rdmTweets4, as.data.frame))
df5 <- do.call("rbind", lapply(rdmTweets5, as.data.frame))
df <- rbind(df1, df2, df3, df4, df5) # Creating a single dataframe with all the tweets
Encoding(df$text) <- "UTF-8"
myCorpus <- Corpus(VectorSource(df$text)) # Building a corpus
Encoding(myCorpus$content) <- "UTF-8"
# Creating matrix od tweets after "cleaning" them from anything unnecessary
myDtm <- TermDocumentMatrix(myCorpus, control =
list(removePunctuation = TRUE,
stopwords = c("agronewsgr","για","και","από","των",
"την","στις","της","του","τον","τους",
"τις","στους","αύριο","στην","προς",
"που","στα","κάθε","λέει","στο","στη",
"ζωντανά","αγρότες","αγροτικής","μήνα",
"ημέρες","μέρες","στον", "έως", "λόγω",
"αγροτικό","ζητά","αλλά","χωρίς", "προ",
"αγροτικού", "δείτε", "πριν", "πού",
"πιο", "όλοι", "φωτό","νέα", "δισ", "δεν",
"ειδήσεις","αγροτικές", "μέχρι","μετά","γίνει",
"είναι","ανά","νέο","αγροτική","αγροτών","κιλό","https",
stopwords("english")),
removeNumbers = TRUE, tolower = TRUE))
m <- as.matrix(myDtm)
# This R script is created as a Shiny application to generate a wordcloud out of tweets
# of Greek agricultural press.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(twitteR)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
# Setting twitter credentials
credentials<-read.table("C:/Users/itsergoulas/Dropbox/Website/shiny/wordcloud/credentials.txt")
setup_twitter_oauth(as.character(credentials[1,1]), as.character(credentials[2,1]),
as.character(credentials[3,1]), as.character(credentials[4,1]))
# Retrieving the first 50 tweets from the timeline of the main agricultural press's users
rdmTweets1 <- userTimeline("ypaithros", n=50)
rdmTweets2 <- userTimeline("Agronewsgr", n=50)
rdmTweets3 <- userTimeline("agrocapital", n=50)
rdmTweets4 <- userTimeline("agroteseu", n=50)
rdmTweets5 <- userTimeline("Agrotypos", n=50)
df1 <- do.call("rbind", lapply(rdmTweets1, as.data.frame))
df2 <- do.call("rbind", lapply(rdmTweets2, as.data.frame))
df3 <- do.call("rbind", lapply(rdmTweets3, as.data.frame))
df4 <- do.call("rbind", lapply(rdmTweets4, as.data.frame))
df5 <- do.call("rbind", lapply(rdmTweets5, as.data.frame))
df <- rbind(df1, df2, df3, df4, df5) # Creating a single dataframe with all the tweets
Encoding(df$text) <- "UTF-8"
myCorpus <- Corpus(VectorSource(df$text)) # Building a corpus
Encoding(myCorpus$content) <- "UTF-8"
# Creating matrix od tweets after "cleaning" them from anything unnecessary
myDtm <- TermDocumentMatrix(myCorpus, control =
list(removePunctuation = TRUE,
stopwords = c("agronewsgr","για","και","από","των",
"την","στις","της","του","τον","τους",
"τις","στους","αύριο","στην","προς",
"που","στα","κάθε","λέει","στο","στη",
"ζωντανά","αγρότες","αγροτικής","μήνα",
"ημέρες","μέρες","στον", "έως", "λόγω",
"αγροτικό","ζητά","αλλά","χωρίς", "προ",
"αγροτικού", "δείτε", "πριν", "πού",
"πιο", "όλοι", "φωτό","νέα", "δισ", "δεν",
"ειδήσεις","αγροτικές", "μέχρι","μετά","γίνει",
"είναι","ανά","νέο","αγροτική","αγροτών","κιλό","https",
stopwords("english")),
removeNumbers = TRUE, tolower = TRUE))
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/wordcloud')
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
test<-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url=fileUrl, destfile="fsspid.csv", method="curl")
dateDownloaded <- date()
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
install.packages("data.table")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url=fileUrl, destfile="fsspid.csv", method="curl")
dateDownloaded <- date()
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
?system.time
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2]
Sys.getlocale()
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/wordcloud')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/wordcloud')
# This R script is created as a Shiny application to generate a wordcloud out of tweets
# of Greek agricultural press.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(twitteR)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
# Setting twitter credentials
credentials<-read.table("credentials.txt")
setup_twitter_oauth(as.character(credentials[1,1]), as.character(credentials[2,1]),
as.character(credentials[3,1]), as.character(credentials[4,1]))
# Retrieving the first 50 tweets from the timeline of the main agricultural press's users
rdmTweets1 <- userTimeline("ypaithros", n=50)
rdmTweets2 <- userTimeline("Agronewsgr", n=50)
rdmTweets3 <- userTimeline("agrocapital", n=50)
rdmTweets4 <- userTimeline("agroteseu", n=50)
rdmTweets5 <- userTimeline("Agrotypos", n=50)
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/wordcloud')
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/wordcloud')
require(httr) r require(httpuv) r require(rjson) r myApp = oauth_app(appname="bobbruno-app0001-coursera-getdata-003", key="a4c9422a2c10ffeab01d", secret="6d0a6c7cba72d7e16712c0b4fdabea2502b39cb6") r githubToken = oauth2.0_token(oauth_endpoints("github"), myApp, cache = TRUE)
require(httr) require(httpuv) require(rjson) myApp = oauth_app(appname="bobbruno-app0001-coursera-getdata-003", key="a4c9422a2c10ffeab01d", secret="6d0a6c7cba72d7e16712c0b4fdabea2502b39cb6") githubToken = oauth2.0_token(oauth_endpoints("github"), myApp, cache = TRUE)
require(httr)
require(httpuv)
require(rjson)
myApp = oauth_app(appname="bobbruno-app0001-coursera-getdata-003", key="a4c9422a2c10ffeab01d", secret="6d0a6c7cba72d7e16712c0b4fdabea2502b39cb6")
githubToken = oauth2.0_token(oauth_endpoints("github"), myApp, cache = TRUE)
json1 = content(GET("https://api.github.com/users/jtleek/repos"))
myRepo = json1[sapply(json1, function(x) x$name == "datasharing")]
sprintf("Repository created at %s", myRepo[[1]]$created_at)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
library(data.table)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
library(sql)
install.packages("sql")
install.packages("sqldf")
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
library(sqldf)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
page = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(page)
close(page)
nchar(htmlCode[c(10, 20, 30, 100)])
df = read.fwf(file="./wksst8110.for", widths=c(10, -5, 4, 4,-5, 4, 4, -5, 4, 4, -5, 4, 4), skip=4,col.names=c("Week", "Nino12SST", "Nino12SSTA", "Nino3SST", "Nino3SSTA", "Nino34SST", "Nino34SSTA", "Nino4SST", "Nino4SSTA"))
sum(df$Nino3SST)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/area_eu_cultivated')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/area_eu_cultivated')
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/honey_plants')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/honey_plants')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/honey_plants')
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/honey_plants')
shiny::runGitHub("multilingualShinyApp","chrislad")
shiny::runGitHub("multilingualShinyApp","chrislad")
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/aquaculture_production_eu_country_8407')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/aquaculture_production_eu_country_8407')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/aquaculture_production_eu_country_8407')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/aquaculture_production_eu_country_8407')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/aquaculture_production_eu_country_8407')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/aquaculture_production_eu_country_8407')
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/en/cereal_eu_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/en/eggs_plants')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/en/fresh_vegetables_eu_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/en/milk_production_eu_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/en/milk_production_eu_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/en/snails_plants')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/sector/en/wine_production_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_added_value_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_child_employment_wb_country')
library(swirl)
library(swirl)
swirl()
library(dplyr)
cran(tbl_df(mydf))
cran<-(tbl_df(mydf))
cran<-tbl_df(mydf))
cran<-tbl_df(mydf)
rm("mydf")
cran
group_by?
?
group_by()?
?
group_by()
help(group_by)
by_package<-group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
arrange(top_counts, desc(count()))
top_sorted<-arrange(top_counts, desc(count()))
top_sorted<-arrange(top_counts, desc(count)
)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sroted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result1)
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, count)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
View(students2)
View(students2)
submit()
students3
submit()
?spread
?spread
submit()
View(students3)
submit()
View(students3)
View(students3)
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
View(students3)
source('C:/Users/ITSERG~1/AppData/Local/Temp/RtmpgFKj94/script3.R')
submit()
View(students3)
?parse_number
submit()
source('C:/Users/ITSERG~1/AppData/Local/Temp/RtmpgFKj94/script3.R')
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(parse_number(class))
### Call to mutate() goes here %>%
print
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate(passed, status, "passed")
passed<-mutate(passed, status="passed")
failed<-mutate(failed, status="failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_econ_active_fem_population_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/agri_econ_active_population_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_econ_active_population_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_employment_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_population_percentage_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_population_percentage_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_population_percentage_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_population_persqkm_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_population_rate_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_population_rate_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_population_rate_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_real_gdp_per_capita_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_real_gdp_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_real_gdp_per_capita_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_real_gdp_wb_country')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/agri_real_gdp_wb_country')
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hh:mm:ss("03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
update(this_moment)
this_moment<-update(this_moment)
this_moment<-update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
update(depart, hours=17, minutes=34)
depart<-update(depart, hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
interval(arrive, last_time)
?interval
how_long<-interval(arrive, last_time)
how_long<-interval(last_time, arrive)
as.period(how_long)
stopwatch()
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(dplyr)
library(lubridate)
library(shinydashboard)
library(corrplot)
library(Quandl)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
percent <- function(x, digits = 2, format = "f", ...) { # A function to show number as percentage
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k) # A function to show number with k decimal places
Quandl.api_key("KCo4sXzWEzSAb81ff3VP") # Setting API key to have unlimited access to databases
data_codes<-c("COM/WLD_SUGAR_EU", "COM/WLD_SUGAR_WLD", "COM/WLD_SUGAR_US", # Setting wanted Quandl database codes
"COM/COFFEE_BRZL", "COM/COFFEE_CLMB", "COM/WLD_COFFEE_ARABIC",
"COM/RICE_2", "COM/WLD_RICE_05", "COM/WLD_RICE_05_VNM")
# Setting Quandl codes respective description
data_descr<-c("Sugar Price, EU, cents/kg", "Sugar Price, world, cents/kg", "Sugar Price, US, cents/kg",
"Coffee, Brazilian, Comp.", "Coffee, Colombian, NY lb.", "Coffee Price, Arabica, cents/kg",
"Rice, Long Grain Milled, No. 2 AR", "Rice Price, Thailand, 5%, $/mt", "Rice Price, Vietnamese, 5%, $/mt")
data_product<-c("Sugar","Sugar","Sugar",
"Coffee","Coffee","Coffee",
"Rice","Rice","Rice")
data_quandl<-data.frame(data_descr, data_codes, data_product) # Binding codes and description to dataframe
View(data_quandl)
data_filtered<-as.data.frame(data_quandl[which(data_quandl$data_product==input$commodity),])
mydata<-data.frame(Date= character(0), Value= character(0), Description=character(0))
for (i in 1:nrow(data_filtered)){
temp<-Quandl(as.character(data_filtered[i,2]))
temp$Description<-as.character(data_filtered[i,1])
colnames(temp)<-c("Date", "Value", "Description")
mydata<-rbind(mydata, temp)
}
data_filtered<-as.data.frame(data_quandl[which(data_quandl$data_product=="Sugar"),])
mydata<-data.frame(Date= character(0), Value= character(0), Description=character(0))
for (i in 1:nrow(data_filtered)){
temp<-Quandl(as.character(data_filtered[i,2]))
temp$Description<-as.character(data_filtered[i,1])
colnames(temp)<-c("Date", "Value", "Description")
mydata<-rbind(mydata, temp)
}
View(mydata)
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
test<-reshape(mydata, direction = "wide", idvar = "Date", timevar = "Description")
View(test)
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
?gvisLineChart
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
library(forecast)
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
mydata_multiple<-reshape(mydata, direction = "wide", idvar = "Date", timevar = "Description")
yfit<-Arima(mydata_multiple,order=c(1,0,1))
yfor<-forecast(yfit)
mydata_multiple<-funggcast(y,yfor)
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
mydata_1_product <- unique(mydata$Description)[1]
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
mydata_1_product <- unique(mydata()$Description)[1]
mydata_1<-mydata()[which(mydata()$Description==mydata_1_product),]
mydata_1_product <- unique(mydata$Description)[1]
mydata_1<-mydata()[which(mydata$Description==mydata_1_product),]
mydata_1<-mydata[which(mydata$Description==mydata_1_product),]
View(mydata_1)
yfit<-Arima(mydata_1,order=c(1,0,1))
yfor<-forecast(yfit)
View(mydata_1)
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
??fungcast
??funggcast
??funggcast()
mydata_1_product <- unique(mydata$Description)[1]
yfit<-Arima(mydata_1$Value,order=c(1,0,1))
yfor<-forecast(yfit)
mydata_1<-funggcast(mydata_1,yfor)
fit.m <- Arima(mydata$Value,order = c(0,1,1))
forecast.m <- plot(forecast(fit.m,h=10))
fit.m <- Arima(mydata$Value,order = c(0,1,1))
forecast.m <- plot(forecast(fit.m,h=100))
fit.m <- Arima(mydata$Value,order = c(0,1,1))
forecast.m <- plot(forecast(fit.m,h=1000))
fit.m <- Arima(mydata$Value,order = c(0,1,1),include.drift=TRUE)
forecast.m <- plot(forecast(fit.m,h=1000))
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
mydata_1_product <- unique(mydata()$Description)[1]
mydata_1<-mydata()[which(mydata()$Description==mydata_1_product),]
fit.m <- Arima(mydata_1$Value,order = c(0,1,1),include.drift=TRUE)
mydata_1 <- plot(forecast(fit.m,h=1000))
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
mydata_1_product <- unique(mydata$Description)[1]
mydata_1<-mydata[which(mydata$Description==mydata_1_product),]
fit.m <- Arima(mydata_1$Value,include.drift=TRUE)
mydata_1 <- plot(forecast(fit.m,h=1000))
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
View(mydata_multiple)
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/wordcloud')
shiny::runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/cooperatives')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/cooperatives')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/country/en/cooperatives')
runApp('C:/Users/itsergoulas/Dropbox/Website/shiny/prices')
