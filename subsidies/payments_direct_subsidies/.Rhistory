mydata<-mydata[which(mydata$fund=='ΕΤΑ'), ] # Filtering data
mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
data_year<-mydata[c("date", "payment_amount")]
data_year<-mutate(data_year, year=year(date))
data_year<-mutate(data_year, month=month(date, label=TRUE))
data_year<-aggregate(payment_amount~c(year, month), data_year, sum)
data_year<-aggregate(payment_amount~c("year", "month"), data_year, sum)
data_year<-mydata[c("date", "payment_amount")]
data_year<-mutate(data_year, year=year(date))
data_year<-mutate(data_year, month=month(date, label=TRUE))
data_year<-aggregate(payment_amount~month, data_year, sum)
View(data_year)
data_year<-mydata[c("date", "payment_amount")]
data_year<-mutate(data_year, year=year(date))
data_year<-mutate(data_year, month=month(date, label=TRUE))
data_year<-aggregate(payment_amount~cbind(year, month), data_year, sum)
data_year<-mydata[c("date", "payment_amount")]
data_year<-mutate(data_year, year=year(date))
data_year<-mutate(data_year, month=month(date, label=TRUE))
data_year<-aggregate(cbind(year, month)~payment_amount, data_year, sum)
View(data_year)
View(data_year)
runApp('subsidies/payments_epalth_20072013')
data_year<-mydata[c("date", "payment_amount")]
data_year<-mutate(data_year, year=year(date))
data_year<-mutate(data_year, month=month(date, label=TRUE))
data_year<-aggregate(cbind(year, month)~payment_amount, data_year, sum)
data_year<-mutate(data_year, cumsum=cumsum(payment_amount))
data_year<-data_year[c("year", "month", "cumsum")]
colnames(data_year)<-c("year", "month", "total")
data_year
View(data_year)
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
class(data_year$total)
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
ggplot(data_year, aes(x = month, y = total, groupby=year, colour=year)) +
geom_line() +
scale_x_discrete(expand=c(0, 0.5)) +
scale_y_continuous(labels = comma) +
xlab("Ημερομηνία") + ylab("Πληρωμές (Ευρώ)") +
ggtitle("Απορρόφηση πόρων Επιχειρησιακού Προγράμματος Αλιείας 2007-2013 και αντιπαραβολή ανά έτος") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=20)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
ggplot(data_year, aes(x = month, y = total)) +
geom_line() +
scale_x_discrete(expand=c(0, 0.5)) +
scale_y_continuous(labels = comma) +
xlab("Ημερομηνία") + ylab("Πληρωμές (Ευρώ)") +
ggtitle("Απορρόφηση πόρων Επιχειρησιακού Προγράμματος Αλιείας 2007-2013 και αντιπαραβολή ανά έτος") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=20)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
runApp('subsidies/payments_epalth_20072013')
ggplot(data_year(), aes(x = month, y = total, colour=year)) +
geom_bar(stat="identity") +
scale_x_discrete(expand=c(0, 0.5)) +
scale_y_continuous(labels = comma) +
xlab("Ημερομηνία") + ylab("Πληρωμές (Ευρώ)") +
ggtitle("Απορρόφηση πόρων Επιχειρησιακού Προγράμματος Αλιείας 2007-2013 και αντιπαραβολή ανά έτος") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=20)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
ggplot(data_year, aes(x = month, y = total, colour=year)) +
geom_bar(stat="identity") +
scale_x_discrete(expand=c(0, 0.5)) +
scale_y_continuous(labels = comma) +
xlab("Ημερομηνία") + ylab("Πληρωμές (Ευρώ)") +
ggtitle("Απορρόφηση πόρων Επιχειρησιακού Προγράμματος Αλιείας 2007-2013 και αντιπαραβολή ανά έτος") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=20)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
ggplot(data_year, aes(x = month, y = total, groupby=year)) +
geom_bar(stat="identity") +
scale_x_discrete(expand=c(0, 0.5)) +
scale_y_continuous(labels = comma) +
xlab("Ημερομηνία") + ylab("Πληρωμές (Ευρώ)") +
ggtitle("Απορρόφηση πόρων Επιχειρησιακού Προγράμματος Αλιείας 2007-2013 και αντιπαραβολή ανά έτος") +
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=20)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=14))
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
View(mydata)
runApp('subsidies/payments_epalth_20072013')
class(data_year$year)
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
wdi::search()
?wdi
?Wdi
?WDI
library(WDI)
?WDI
WDIsearch(string = "agr")
test<-WDIsearch(string = "agr")
View(test)
mydata<-WDI(country = "all", indicator = "SL.AGR.EMPL.ZS", extra = FALSE, cache = NULL) # Downloading raw data from World Bank
mydata$year<-as.character(mydata$year)
View(mydata)
shiny::runApp('country/agri_employment_wb_country')
View(mydata)
runApp('country/agri_employment_wb_country')
runApp('country/agri_employment_wb_country')
View(test)
runApp('country/agri_graduates_wb_country')
mydata<-WDI(country = "all", indicator = "UIS.G.56.F600.dcount", extra = FALSE, cache = NULL) # Downloading raw data from World Bank
mydata$year<-as.character(mydata$year)
runApp('country/agri_graduates_wb_country')
runApp('country/agri_graduates_wb_country')
mydata<-WDI(country = "all", indicator = "SL.AGR.0714.ZS", extra = FALSE, cache = NULL) # Downloading raw data from World Bank
mydata$year<-as.character(mydata$year)
View(mydata)
runApp('country/agri_graduates_wb_country')
runApp('country/agri_graduates_wb_country')
install.packages("oecd")
install.packages("OECD")
search_dataset("agri", data = get_datasets(), ignore.case = TRUE)
library(OECD)
search_dataset("agri", data = get_datasets(), ignore.case = TRUE)
test<-search_dataset("agri", data = get_datasets(), ignore.case = TRUE)
View(test)
test<-search_dataset("a", data = get_datasets(), ignore.case = TRUE)
View(test)
test<-search_dataset("farm", data = get_datasets(), ignore.case = TRUE)
View(test)
test<-search_dataset("rur", data = get_datasets(), ignore.case = TRUE)
View(test)
search_dataset("agri", data = get_datasets(), ignore.case = TRUE)
View(test)
test<-WDIsearch(string = "agr")
test1<-WDIsearch(string = "rur")
View(test1)
test2<-WDIsearch(string = "farm")
View(test2)
View(test1)
View(test)
test<-WDIsearch(string = "agr")
library(WDI)
test<-WDIsearch(string = "agr")
test1<-WDIsearch(string = "rur")
test2<-WDIsearch(string = "farm")
View(test)
View(test)
View(test)
write.csv(test, file = "test.csv")
write.csv(test1, file = "test1.csv")
write.csv(test2, file = "test2.csv")
shiny::runApp('country/agri_added_value_wb_country')
mydata<-WDI(country = "all", indicator = "NV.AGR.TOTL.KD", extra = FALSE, cache = NULL) # Downloading raw data from World Bank
mydata$year<-as.character(mydata$year)
names(mydata)[names(mydata)=="NV.AGR.TOTL.KD"] <- "total_added_value"
mydata<-mydata[which(!is.na(mydata$total_added_value)),] # Filtering for NA values
View(mydata)
runApp('country/agri_added_value_wb_country')
runApp('country/agricultural_land_sqkm_wb_country')
runApp('country/agricultural_land_sqkm_wb_country')
runApp('country/agricultural_land_sqkm_wb_country')
mydata<-WDI(country = "all", indicator = "AG.LND.AGRI.K2", extra = FALSE, cache = NULL) # Downloading raw data from World Bank
mydata$year<-as.character(mydata$year)
names(mydata)[names(mydata)=="AG.LND.AGRI.K2"] <- "agri_area_sqkm"
mydata<-mydata[which(!is.na(mydata$agri_area_sqkm)),] # Filtering for NA values
mydata_filtered<-mydata[which(mydata$year>=input$myyear[1] & mydata$year<=input$myyear[2]),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Euro")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "income")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "dividend")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "East Asia")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "IDA")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Latin")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Sub")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "OECD")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "South Asia")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Least")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Middle")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "World")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "IBRD")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Arab")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Heavily")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Fragile")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Central Europe")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "states")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "America")),]
runApp('country/agricultural_land_sqkm_wb_country')
ata_year_temp<-aggregate(mydata_top_five$agri_area_sqkm, by=list(Country=mydata_top_five$country), FUN=mean)
data_year_temp<-data_year_temp[order(-data_year_temp$x),]
data_year_temp<-data_year_temp[1:5,] # Keeping top five countries
data_year_temp<-aggregate(mydata_top_five$agri_area_sqkm, by=list(Country=mydata_top_five$country), FUN=mean)
data_year_temp<-data_year_temp[order(-data_year_temp$x),]
data_year_temp<-data_year_temp[1:5,] # Keeping top five countries
mydata_filtered<-mydata[which(!startsWith(mydata$country, "Euro")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "income")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "dividend")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "East Asia")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "IDA")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Latin")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Sub")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "OECD")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "South Asia")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Least")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Middle")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "World")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "IBRD")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Arab")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Heavily")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Fragile")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Central Europe")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "states")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "America")),]
data_year_temp<-aggregate(mydata_top_five$agri_area_sqkm, by=list(Country=mydata_top_five$country), FUN=mean)
data_year_temp<-data_year_temp[order(-data_year_temp$x),]
data_year_temp<-data_year_temp[1:5,] # Keeping top five countries
mydata_top_five<-mydata_top_five[which(mydata_top_five$country %in% data_year_temp$Country),]
runApp('country/agricultural_land_sqkm_wb_country')
runApp('country/agricultural_land_wb_country')
runApp('country/agri_added_value_wb_country')
runApp('country/agri_employment_wb_country')
runApp('country/agri_employment_wb_country')
runApp('country/agri_employment_wb_country')
mysummary <- data.frame(
aggregate(employment~country, mydata, min),
aggregate(employment~country, mydata, max),
aggregate(employment~country, mydata, mean))
mysummary <- mysummary[,c(1,2,4,6,8)]
colnames(mysummary) <- c("Χώρα", "Ελάχιστο ποσοστό γεωργικής απασχόλησης", "Μέγιστο ποσοστό γεωργικής απασχόλησης", "Μέσο ποσοστό γεωργικής απασχόλησης", "Διάμεσος")
mysummary
View(mydata)
mydata<-WDI(country = "all", indicator = "SL.AGR.EMPL.ZS", extra = FALSE, cache = NULL) # Downloading raw data from World Bank
mydata$year<-as.character(mydata$year)
names(mydata)[names(mydata)=="SL.AGR.EMPL.ZS"] <- "employment"
mydata<-mydata[which(!is.na(mydata$employment)),] # Filtering for NA values
# Filtering out groups of countries
mydata_filtered<-mydata[which(!startsWith(mydata$country, "Euro")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "income")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "dividend")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "East Asia")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "IDA")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Latin")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Sub")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "OECD")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "South Asia")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Least")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Middle")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "World")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "IBRD")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Arab")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Heavily")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Fragile")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Central Europe")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "states")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "America")),]
View(mydata)
runApp('country/agri_employment_wb_country')
runApp('country/agri_employment_wb_country')
mydata_summary<-mydata[which(mydata$year>=2006 & mydata$year<=2013),]
View(mydata_summary)
runApp('country/agri_employment_wb_country')
runApp('country/agri_employment_wb_country')
runApp('country/agri_employment_wb_country')
runApp('country/agri_graduates_wb_country')
mydata<-WDI(country = "all", indicator = "SL.AGR.0714.ZS", extra = FALSE, cache = NULL) # Downloading raw data from World Bank
mydata$year<-as.character(mydata$year)
names(mydata)[names(mydata)=="SL.AGR.0714.ZS"] <- "child_employment"
mydata<-mydata[which(!is.na(mydata$child_employment)),] # Filtering for NA values
# Filtering out groups of countries
mydata_filtered<-mydata[which(!startsWith(mydata$country, "Euro")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "income")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "dividend")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "East Asia")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "IDA")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Latin")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Sub")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "OECD")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "South Asia")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Least")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Middle")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "World")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "IBRD")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Arab")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Heavily")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Fragile")),]
mydata_filtered<-mydata_filtered[which(!startsWith(mydata_filtered$country, "Central Europe")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "states")),]
mydata_filtered<-mydata_filtered[which(!endsWith(mydata_filtered$country, "America")),]
data_year<-mydata_filtered[mydata_filtered$year==input$year,  c("country", "child_employment")]
data_year<-aggregate(data_year$child_employment, by=list(Country=data_year$country), FUN=sum)
colnames(data_year)<-c("Χώρα", "Απασχόληση ανηλίκων στο γεωργικό τομέα (%)")
runApp('country/agri_graduates_wb_country')
mydata_top_five<-mydata_filtered[which(mydata_filtered$year>=2006 & mydata_filtered$year<=2013,]
data_year_temp<-aggregate(mydata_top_five$employment, by=list(Country=mydata_top_five$country), FUN=mean)
data_year_temp<-data_year_temp[order(-data_year_temp$x),]
data_year_temp<-data_year_temp[1:5,] # Keeping top five countries
mydata_top_five<-mydata_top_five[which(mydata_top_five$country %in% data_year_temp$Country),]
mydata_top_five<-mydata_filtered[which(mydata_filtered$year>=input$myyear[1] & mydata_filtered$year<=input$myyear[2]),]
mydata_top_five<-mydata_filtered[which(mydata_filtered$year>=2004 & mydata_filtered$year<=2013),]
data_year_temp<-aggregate(mydata_top_five$employment, by=list(Country=mydata_top_five$country), FUN=mean)
data_year_temp<-data_year_temp[order(-data_year_temp$x),]
data_year_temp<-data_year_temp[1:5,] # Keeping top five countries
mydata_top_five<-mydata_top_five[which(mydata_top_five$country %in% data_year_temp$Country),]
data_year_temp<-aggregate(mydata_top_five$employment, by=list(Country=mydata_top_five$country), FUN=mean)
View(mydata_top_five)
runApp('country/agri_graduates_wb_country')
runApp('country/total_agri_exports_wb_country')
runApp('country/total_agri_exports_wb_country')
runApp('country/total_agri_exports_wb_country')
runApp('country/total_agri_exports_wb_country')
runApp('country/total_agri_imports_wb_country')
runApp('country/total_agri_imports_wb_country')
runApp('country/agri_added_value_wb_country')
runApp('country/agri_econ_active_population_wb_country')
runApp('country/agricultural_irrigated_land_wb_country')
runApp('country/agricultural_irrigated_land_wb_country')
runApp('country/agricultural_land_wb_country')
runApp('country/agri_econ_active_fem_population_wb_country')
runApp('country/agri_added_value_wb_country')
runApp('country/agri_real_gdp_wb_country')
runApp('country/agri_population_persqkm_wb_country')
runApp('country/agri_population_rate_wb_country')
runApp('country/agri_population_rate_wb_country')
runApp('country/agri_real_gdp__per_capita_wb_country')
runApp('country/agri_population_percentage_wb_country')
runApp('country/agri_population_percentage_wb_country')
shiny::runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
?dataTableOutput
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
shiny::runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
?valueBoxOutput
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
runApp('region/Νέος φάκελος')
shiny::runApp('country/agri_added_value_wb_country')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(dplyr)
library(lubridate)
library(shinydashboard)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
mydata<-read.csv("./payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
mydata<-mydata[which(mydata$fund=='ΕΤΑ'), ] # Filtering data
mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(dplyr)
library(lubridate)
library(shinydashboard)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
mydata<-read.csv("C:\\Users\\Ilias Tsergoulas\\Dropbox\\Website\\shiny\\subsidies\\payments_epalth_20072013\\payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
mydata<-mydata[which(mydata$fund=='ΕΤΑ'), ] # Filtering data
mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
View(mydata)
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
data_measure<-mydata[mydata$measure=="Μ221 - Υδατοκαλλιέργεια", c("date", "payment_amount")]
data_measure<-mutate(data_measure, cumsum=cumsum(payment_amount))
data_measure<-data_measure[c("date", "cumsum")]
colnames(data_measure)<-c("Ημερομηνία", "Καταβληθείσα Δ.Δ.")
View(data_measure)
runApp('subsidies/payments_epalth_20072013_measures')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(dplyr)
library(lubridate)
library(shinydashboard)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
mydata<-read.csv("C:\\Users\\Ilias Tsergoulas\\Dropbox\\Website\\shiny\\subsidies\\payments_epalth_20072013\\payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
mydata<-mydata[which(mydata$fund=='ΕΤΑ'), ] # Filtering data
mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
View(mydata)
data_measure<-mydata[mydata$measure=="Μ221 – Υδατοκαλλιέργεια", c("date", "payment_amount")]
data_measure<-mutate(data_measure, cumsum=cumsum(payment_amount))
data_measure<-data_measure[c("date", "cumsum")]
colnames(data_measure)<-c("Ημερομηνία", "Καταβληθείσα Δ.Δ.")
View(data_measure)
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
?ωαλθεΒοχ
?valueBox
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
data_total<-mutate(data_total, cumsum=cumsum(payment_amount))
data_total<-data_total[c("date", "cumsum")]
colnames(data_total)<-c("Ημερομηνία", "Καταβληθείσα Δ.Δ.")
data_total
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_epalth_20072013_measures')
shiny::runApp('country/agri_added_value_wb_country')
install.pakages("shinydashboard")
install.packages("shinydashboard")
runApp('country/agri_added_value_wb_country')
runApp('subsidies/payments_epalth_20072013_measures')
install.packages("lubridate")
runApp('subsidies/payments_epalth_20072013_measures')
runApp('subsidies/payments_direct_subsidies')
# process it and create plots and maps.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(dplyr)
library(lubridate)
library(shinydashboard)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
mydata<-read.csv("./payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
runApp('subsidies/payments_direct_subsidies')
mydata<-read.csv("./payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
setwd("~/Dropbox/Website/shiny")
runApp('subsidies/payments_direct_subsidies')
setwd("~/Dropbox/Website/shiny/subsidies/payments_direct_subsidies")
runApp()
mydata<-read.csv("./payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
View(mydata)
runApp()
mydata<-mydata[which(mydata$fund=='Άμεσες Ενισχύσεις'), ] # Filtering data
View(mydata)
mydata<-read.csv("./payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
View(mydata)
runApp()
runApp()
runApp('~/Dropbox/Website/shiny/subsidies/payments_market')
runApp('~/Dropbox/Website/shiny/subsidies/payments_paa_20072013')
runApp('~/Dropbox/Website/shiny/subsidies/payments_paa_20142020')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(dplyr)
library(lubridate)
library(shinydashboard)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
mydata<-read.csv("./payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
View(mydata)
View(mydata)
runApp('~/Dropbox/Website/shiny/subsidies/payments_paa_20142020')
runApp('~/Dropbox/Website/shiny/subsidies/payments_market')
runApp('~/Dropbox/Website/shiny/subsidies/payments_market')
runApp('~/Dropbox/Website/shiny/subsidies/payments_market')
runApp('~/Dropbox/Website/shiny/subsidies/payments_epalth_20072013')
runApp('~/Dropbox/Website/shiny/subsidies/payments_market')
runApp('~/Dropbox/Website/shiny/subsidies/payments_epalth_20072013')
runApp('~/Dropbox/Website/shiny/subsidies/payments_market')
runApp('~/Dropbox/Website/shiny/subsidies/payments_market')
runApp('~/Dropbox/Website/shiny/subsidies/payments_paa_20142020')
