weight = 1)
leaflet(data = regions) %>%
addProviderTiles("Stamen.Watercolor") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1)
?readShapePoly
regions<-readShapePoly("/home/iliastsergoulas/Dropbox/Website/shapefiles/regions/regions.shp", proj4string=CRS(as.character(4326)))
regions<-readShapePoly("/home/iliastsergoulas/Dropbox/Website/shapefiles/regions/regions.shp", proj4string=CRS(as.character(EPSG:4326)))
regions<-readShapePoly("/home/iliastsergoulas/Dropbox/Website/shapefiles/regions/regions.shp", proj4string=CRS(as.character(WGS 84)))
regions<-readShapePoly("/home/iliastsergoulas/Dropbox/Website/shapefiles/regions/regions.shp", proj4string=CRS(as.character("WGS 84")))
regions<-readShapePoly("/home/iliastsergoulas/Dropbox/Website/shapefiles/regions/regions.shp")
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1, popup=region_eng)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1, popup=region_gr)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1, popup=region_id)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1, popup=region$region_id)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1, popup=regions$region_id)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1, popup=regions$region_are)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1, popup=regions$region_area)
leaflet(data = regions) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addPolygons(fillColor = ~pal(region_are),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1, popup=regions$region_pop)
ggplot(m)
ggplot(regions)
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group, fill=region_are))
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group))
gplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group)) +
geom_path(aes(x=long, y=lat, group=group), colour="black")
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group)) +
geom_path(aes(x=long, y=lat, group=group), color="black")
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group, fill=region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black")
Regions defined for each Polygons
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group, fill=region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black")
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group, fill=region_id)) +
geom_path(aes(x=long, y=lat, group=group), color="black")
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group, fill=region_id)) +
geom_path(aes(x=long, y=lat, group=group), color="black")
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group, fill=region_id)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
Value
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group, fill=Value)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
View(regions)
ggplot(regions) +
geom_polygon(aes(x=long, y=lat, group=group, fill=region_are)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string(x=long, y=lat, group=group, fill=region_are)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string(x=long, y=lat, fill=region_are)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
View(regions.f)
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string(x=long, y=lat, fill=region_are)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string(x=long, y=lat, fill=region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string(fill=region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string()) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string(x=long, y=lat, group=group, fill=region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string(x=long, y=lat)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(inherit.aes=FALSE, aes_string(x=long, y=lat, group=group, fill=region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(inherit.aes=FALSE, aes_string(x=long, y=lat, fill=region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes_string(inherit.aes=FALSE, x=long, y=lat)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, group=group)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=group)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=group, fill=region_are)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=group, fill=region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=group, fill="green")) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=group, fill="red")) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=group, fill=regions$region_are)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=group, fill=regions$region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=group, fill = factor(group))) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
View(regions.f)
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=piece, fill = factor(group))) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions) +
geom_polygon(aes(inherit.aes=FALSE, x=long, y=lat, group=id, fill = factor(id))) +
geom_path(aes(x=long, y=lat, group=group), color="black") + coord_equal()
ggplot(regions, x=long, y=lat, group=id) +
geom_polygon(aes(inherit.aes=FALSE, fill = region_are)) +
geom_path(aes(x=long, y=lat, group=group), color="black") +coord_equal()
ggplot(regions, x=long, y=lat, group=id) +
geom_polygon(aes(inherit.aes=FALSE, fill = region_area)) +
geom_path(aes(x=long, y=lat, group=group), color="black") +coord_equal()
ggplot(regions, x=long, y=lat, group=id) +
geom_polygon(aes(inherit.aes=FALSE, fill = factor(id))) +
geom_path(aes(x=long, y=lat, group=group), color="black") +coord_equal()
ggplot(regions, x=long, y=lat, group=id) +
geom_polygon(fill = factor(id)) +
geom_path(aes(x=long, y=lat, group=group), color="black") +coord_equal()
ggplot(regions, x=long, y=lat, group=id) +
geom_polygon(fill = factor(region_id)) +
geom_path(aes(x=long, y=lat, group=group), color="black") +coord_equal()
ggplot(regions, x=long, y=lat, group=id) +
geom_polygon(fill = factor(regions$region_id)) +
geom_path(aes(x=long, y=lat, group=group), color="black") +coord_equal()
shiny::runApp('country/en/cooperatives')
runApp('country/en/cooperatives')
runApp('country/en/greenhouse_gas_eu_country')
runApp('country/en/total_agri_exports_wb_country')
runApp('country/en/total_agri_imports_wb_country')
runApp('country/en/workforce_agri_eu_country')
runApp('country/en/greenhouse_gas_eu_country')
runApp('sector/wineries')
shiny::runApp('sector/aquaculture_eu_country')
runApp('sector/aquaculture_production_eu_country_8407')
runApp('country/agricultural_land_sqkm_wb_country')
runApp('sector/cereal_eu_country')
runApp('country/agri_population_rate_wb_country')
runApp('country/agri_real_gdp_per_capita_wb_country')
runApp('country/area_eu_cultivated')
runApp('country/greenhouse_gas_eu_country')
runApp('sector/eggs_plants')
shiny::runApp('country/cooperatives')
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(directlabels)
library(scales)
library(rgeos)
library(rgdal)
library(maptools)
library(knitr)
library(png)
library(leaflet)
library(WDI)
library(googleVis)
library(grid)
library(sp)
percent <- function(x, digits = 2, format = "f", ...) { # A function to show number as percentage
as.numeric(formatC(100 * x, format = format, digits = digits, decimal.mark=".", big.mark=",", ...))
}
?readShapePoly
??readShapePoly
library(shiny)
library(shinythemes)
library(leaflet)
library(rgdal)
library(maptools)
library(htmltools)
library(shinydashboard)
?addPolygons
runApp('sector/forest_areas')
?Quandl
??Quandl
shiny::runApp('payments_direct_subsidies')
runApp('prices/gr')
runApp('payments_direct_subsidies')
?paste
shiny::runApp('payments_direct_subsidies')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(dplyr)
library(lubridate)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
mydata<-read.csv("/home/iliastsergoulas/Dropbox/Website/payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
mydata<-mydata[which(mydata$category=='Πληρωμές ΕΤΑ 2007-2013'), ] # Filtering data
mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
max(mydata$date)
View(mydata)
runApp('payments_direct_subsidies')
runApp('payments_direct_subsidies')
lastdate=max(mydata$date)
print(lastdate)
dmy(lastdate)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
mydata<-read.csv("/home/iliastsergoulas/Dropbox/Website/payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
mydata<-mydata[which(mydata$category=='Πληρωμές ΕΤΑ 2007-2013'), ] # Filtering data
mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- mdy(mydata$date) # Converting character to date
View(mydata)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
mydata<-read.csv("/home/iliastsergoulas/Dropbox/Website/payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
mydata<-mydata[which(mydata$category=='Πληρωμές ΕΤΑ 2007-2013'), ] # Filtering data
mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
lastdate=max(mydata$date)
total_payments<-sum(mydata$payment_amount) # Total value
topm<-mydata[which.max(mydata$payment_amount),] # Top measure
header <- dashboardHeader(title = paste0("Πορεία Αλιείας 2007-2013 (τελευταία ημερομηνία ενημέρωσης ",lastdate, ")"),
titleWidth=1000) # Header of dashboard
sidebar <- dashboardSidebar(disable = TRUE)# Disabling sidebar of dashboard
runApp('payments_direct_subsidies')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
mydata<-read.csv("/home/iliastsergoulas/Dropbox/Website/payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
#mydata<-mydata[which(mydata$category=='Πληρωμές ΕΤΑ 2007-2013'), ] # Filtering data
#mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
lastdate=max(mydata$date)
header <- dashboardHeader(title = paste0("Πορεία Προγραμμάτων Επιδότησης (τελευταία ημερομηνία ενημέρωσης ",lastdate, ")"),
titleWidth=1000) # Header of dashboard
sidebar <- dashboardSidebar(sidebarMenu(
selectInput('fund', 'Ταμείο', choices = unique(mydata$fund)),
selectInput('category', 'Κατηγορία', choices = unique(mydata$category)),
selectInput('measure', 'Μέτρο', choices = unique(mydata$measure))
))
View(mydata)
runApp('subsidies/payments_epalth_20072013')
data_total<-mydata[mydata$category=="Λοιπές πληρωμές ΕΛΕΓΕΠ", c("date", "payment_amount")]
runApp('subsidies/payments_epalth_20072013')
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
mydata<-read.csv("/home/iliastsergoulas/Dropbox/Website/payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
#mydata<-mydata[which(mydata$category=='Πληρωμές ΕΤΑ 2007-2013'), ] # Filtering data
#mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
lastdate=max(mydata$date)
header <- dashboardHeader(title = paste0("Πορεία Προγραμμάτων Επιδότησης (τελευταία ημερομηνία ενημέρωσης ",lastdate, ")"),
titleWidth=1000) # Header of dashboard
sidebar <- dashboardSidebar(sidebarMenu(
selectInput('fund', 'Ταμείο', choices = unique(mydata$fund)),
selectInput('category', 'Κατηγορία', choices = unique(mydata$category)),
selectInput('measure', 'Μέτρο', choices = unique(mydata$measure))
))
data_total<-mydata[mydata$category=="Λοιπές Πληρωμές", c("date", "payment_amount")]
data_total<-mutate(mydata, cumsum=cumsum(payment_amount))
data_total<-data_total[c("date", "cumsum")]
data_total<-xts(data_total, order.by=as.POSIXct(data_total$date))
data_total
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
library(shiny)
library(shinythemes)
library(lubridate)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
mydata<-read.csv("/home/iliastsergoulas/Dropbox/Website/payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
#mydata<-mydata[which(mydata$category=='Πληρωμές ΕΤΑ 2007-2013'), ] # Filtering data
#mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
lastdate=max(mydata$date)
header <- dashboardHeader(title = paste0("Πορεία Προγραμμάτων Επιδότησης (τελευταία ημερομηνία ενημέρωσης ",lastdate, ")"),
titleWidth=1000) # Header of dashboard
sidebar <- dashboardSidebar(sidebarMenu(
selectInput('fund', 'Ταμείο', choices = unique(mydata$fund)),
uiOutput("slider_category"),
uiOutput("slider_measure")
))
data_measure<-mutate(data_measure, total=cumsum(payment_amount))
data_measure<-data_measure[c("date", "total")]
data_measure<-xts(data_measure, order.by=as.POSIXct(data_measure$date))
data_measure<-data_total()[data_total()$measure==input$measure, c("date", "payment_amount")]
data_measure<-mutate(data_measure, total=cumsum(payment_amount))
data_measure<-data_measure[c("date", "total")]
data_measure<-xts(data_measure, order.by=as.POSIXct(data_measure$date))
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
shiny::runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/payments_epalth_20072013')
runApp('subsidies/gr')
runApp('subsidies/gr')
library(shiny)
library(shinythemes)
library(lubridate)
library(dplyr)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
mydata<-read.csv("/home/iliastsergoulas/payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
#mydata<-mydata[which(mydata$category=='Πληρωμές ΕΤΑ 2007-2013'), ] # Filtering data
#mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
library(shiny)
library(shinythemes)
library(lubridate)
library(dplyr)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
mydata<-read.csv("/home/iliastsergoulas/Dropbox/Website/payments.csv", sep=",", encoding="UTF-8", stringsAsFactors = FALSE)
#mydata<-mydata[which(mydata$category=='Πληρωμές ΕΤΑ 2007-2013'), ] # Filtering data
#mydata<-mydata[c("date", "measure", "payment_amount")]
mydata$date <- dmy(mydata$date) # Converting character to date
View(mydata)
dat<-aggregate(mydata$payment_amount, by=list(Fund=mydata$fund), FUN=sum)
View(dat)
pie(dat, labels = Fund, main="Pie Chart of Countries")
pie(dat$x, labels = dat$Fund, main="Pie Chart of Countries")
?pie
dat<-mydata[mydata$fund=="ΕΓΤΑΑ"]
dat<-mydata[mydata$fund=="ΕΓΤΑΑ",]
dat<-aggregate(dat$payment_amount, by=list(Category=dat$category), FUN=sum)
pie(dat$x, labels = dat$Category, main="Pie Chart of Countries")
dat<-mydata[mydata$category=="Μέτρα Άξονα 1 - ΕΓΤΑΑ",]
dat<-aggregate(dat$payment_amount, by=list(Measure=dat$measure), FUN=sum)
pie(dat$x, labels = dat$Measure, main="Pie Chart of Countries")
pie(dat$x, labels = dat$Measure, main="Pie Chart of Countries",radius = 1, cex = 0.3)
pie(dat$x, labels = dat$Measure, main="Pie Chart of Countries",radius = 1, cex = 0.5)
pie(dat$x, labels = dat$Measure, main="Pie Chart of Countries",radius = 1, cex = 0.9)
pie(dat$x, labels = dat$Measure, main="Pie Chart of Countries",radius = 1, cex = 0.6)
pie(dat$x, labels = dat$Measure, main="Pie Chart of Countries",radius = 2, cex = 0.6)
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
library(dygraphs)
?dyAnnotation
shiny::runApp('subsidies/gr')
shiny::runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
?car
?car
runApp('~/Desktop')
runApp('~/Desktop')
runApp('~/Desktop')
class(long)
class(lon)
shiny::runApp('~/Desktop')
shiny::runApp('~/Desktop')
