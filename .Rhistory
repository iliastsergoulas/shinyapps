return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # Loading the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # Creating a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.payments") # Getting data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date) # Converting character to date
mydata<-mydata[order(mydata$date),]
lastdate=max(mydata$date)
header <- dashboardHeader(title = paste0("Πορεία Προγραμμάτων Επιδότησης (τελευταία ημερομηνία ενημέρωσης ",lastdate, ")"),
titleWidth=1000) # Header of dashboard
sidebar <- dashboardSidebar(sidebarMenu(
selectInput('fund', 'Ταμείο', choices = unique(mydata$fund)),
uiOutput("slider_category"),
uiOutput("slider_measure")),
selectInput('period', 'Ορίζοντας πρόβλεψης (μήνες)', choices = c("6", "12", "18", "24", "30", "36"), selected='12'),
tags$footer(tags$p("Η παρούσα εφαρμογή βασίζεται σε επεξεργασμένα δεδομένα από Δελτία Τύπου του ΟΠΕΚΕΠΕ.
Το agristats.eu δε φέρει καμία ευθύνη για την ποιότητα των δεδομένων.")))
frow1 <- fluidRow( # Creating row of two diagrams
tabsetPanel(
tabPanel("Χρονική αποτύπωση",dygraphOutput("view_total"),
dygraphOutput("view"),
dataTableOutput("summary"),
downloadButton("downloadData"),width='98%'),
tabPanel("Στατιστικά ανά πρόγραμμα",print("Τα εν λόγω στατιστικά αφορούν την επιλεγμένη χρονική περίοδο."),
dateRangeInput("mydate_category", "Ημερομηνία:",min=as.character(min(mydata$date)), max=as.character(max(mydata$date)),
start=as.character(min(mydata$date)),end=as.character(max(mydata$date)), sep=""),
plotOutput("chart_category"), dataTableOutput("data_category"), width='98%'),
tabPanel("Στατιστικά ανά μέτρο",print("Τα εν λόγω στατιστικά αφορούν την επιλεγμένη χρονική περίοδο."),
dateRangeInput("mydate_measure", "Ημερομηνία:",min=as.character(min(mydata$date)), max=as.character(max(mydata$date)),
start=as.character(min(mydata$date)),end=as.character(max(mydata$date)), sep=""),
plotOutput("chart_measure"), dataTableOutput("data_measure"), width='98%'))
)
data_per_category<-mydata[which(mydata$date>=input$mydate_category[1] & mydata$date<=input$mydate_category[2]),]
data_per_category<-aggregate(data_per_category$payment_amount, by=list(category=data_per_category$category), FUN=sum)
data_per_category<-aggregate(data_per_category$payment_amount, by=list(category=data_per_category$category), FUN=sum)
data_per_category<-aggregate(mydata$payment_amount, by=list(category=mydata$category), FUN=sum)
View(data_per_category)
runApp('subsidies/gr')
runApp('subsidies/gr')
source('~/Dropbox/Website/agristats_applications/dbimporter.R')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
theme(axis.title.x = element_blank(), axis.title.y='Πληρωμές (εκατ. ')
})
output$data_measure <- renderDataTable({ # Creating summary by water_type
data_measure<-data_per_measure()
data_measure$x<-printMoney(data_measure$x)
names(data_measure)<-c("Μέτρο", "Πληρωμές","Ποσοστό συμμετοχής σε συνολικές πληρωμές προγράμματος")
data_measure}, options = list(lengthMenu = c(20, 40, 60), pageLength = 10))
}
shinyApp(ui, server)
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
fund_per_year<-mydata
fund_per_year$year<-year(fund_per_year$date)
fund_per_year$year<-fund_per_year$year[,c("fund","year", "payment_amount")]
fund_per_year<-aggregate(fund_per_year$payment$amount,by=list("fund","year"), FUN=sum)
runApp('subsidies/gr')
fund_per_year<-mydata
fund_per_year$year<-year(fund_per_year$date)
fund_per_year$year<-fund_per_year[,c("fund","year", "payment_amount")]
fund_per_year<-aggregate(fund_per_year$payment$amount,by=list("fund","year"), FUN=sum)
runApp('subsidies/gr')
fund_per_year<-mydata
fund_per_year$year<-year(fund_per_year$date)
fund_per_year$year<-fund_per_year[,c("fund","year", "payment_amount")]
fund_per_year<-aggregate(fund_per_year$payment$amount,by=list(c("fund","year")), FUN=sum)
fund_per_year<-mydata
fund_per_year$year<-year(fund_per_year$date)
fund_per_year$year<-fund_per_year[,c("fund","year", "payment_amount")]
View(fund_per_year)
shiny::runApp('subsidies/gr')
runApp('subsidies/gr')
# This R script is created as a Shiny application based on processed data from OPEKEPE's announcements
# about Agricultural Development, Fisheries, Direct Payments and Market Measures.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(lubridate)
library(dplyr)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
library(RPostgreSQL)
library(ggplot2)
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # Loading the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # Creating a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.payments") # Getting data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date) # Converting character to date
mydata<-mydata[order(mydata$date),]
lastdate=max(mydata$date)
header <- dashboardHeader(title = paste0("Πορεία Προγραμμάτων Επιδότησης (τελευταία ημερομηνία ενημέρωσης ",lastdate, ")"),
titleWidth=1000) # Header of dashboard
sidebar <- dashboardSidebar(sidebarMenu(
selectInput('fund', 'Ταμείο', choices = unique(mydata$fund),selected='ΕΓΤΑΑ'),
uiOutput("slider_category"),
uiOutput("slider_measure")),
selectInput('period', 'Ορίζοντας πρόβλεψης (μήνες)', choices = c("6", "12", "18", "24", "30", "36"), selected='12'),
tags$footer(tags$p("Η παρούσα εφαρμογή βασίζεται σε επεξεργασμένα δεδομένα από Δελτία Τύπου του ΟΠΕΚΕΠΕ.
Το agristats.eu δε φέρει καμία ευθύνη για την ποιότητα των πρωτογενών δεδομένων. Πάγια θέση του είναι ότι η
πληροφορία αυτή ειναι δημόσιο αγαθό και πρέπει να προσφέρεται υπό μορφή ανοιχτών επεξεργάσιμων δεδομένων.")))
frow1 <- fluidRow( # Creating row of two diagrams
tabsetPanel(
tabPanel("Χρονική αποτύπωση",dygraphOutput("view_total"),
dygraphOutput("view"),
dataTableOutput("summary"),width='98%'),
tabPanel("Στατιστικά ανά πρόγραμμα",print("Τα εν λόγω στατιστικά αφορούν την επιλεγμένη χρονική περίοδο."),
dateRangeInput("mydate_category", "Ημερομηνία:",min=as.character(min(mydata$date)), max=as.character(max(mydata$date)),
start=as.character(min(mydata$date)),end=as.character(max(mydata$date)), sep=""),
plotOutput("chart_category"), dataTableOutput("data_category"), width='98%'),
tabPanel("Στατιστικά ανά μέτρο",print("Τα εν λόγω στατιστικά αφορούν την επιλεγμένη χρονική περίοδο."),
dateRangeInput("mydate_measure", "Ημερομηνία:",min=as.character(min(mydata$date)), max=as.character(max(mydata$date)),
start=as.character(min(mydata$date)),end=as.character(max(mydata$date)), sep=""),
plotOutput("chart_measure"), dataTableOutput("data_measure"), width='98%'),
tabPanel("Αντιπαραβολή κατ' έτος", plotOutput("fund_per_year"), width='98%'),
tabPanel("Λήψη δεδομένων", downloadButton("downloadData"), width='98%'))
)
fund_per_year<-mydata
fund_per_year$year<-year(fund_per_year$date)
fund_per_year$year<-fund_per_year[,c("fund","year", "payment_amount")]
fund_per_year<-aggregate(fund_per_year$payment_amount,by=list(c("fund","year")), FUN=sum)
runApp('subsidies/gr')
runApp('subsidies/gr')
fund_per_year<-mydata
fund_per_year$year<-year(fund_per_year$date)
fund_per_year$year<-fund_per_year[,c("fund","year", "payment_amount")]
fund_per_year<-aggregate(fund_per_year$payment_amount,by=list("fund","year"), FUN=sum)
View(fund_per_year)
runApp('subsidies/gr')
fund_per_year<-mydata
fund_per_year$year<-fund_per_year[,c("fund","date", "payment_amount")]
fund_per_year$date<-year(fund_per_year$date)
View(fund_per_year)
# This R script is created as a Shiny application based on processed data from OPEKEPE's announcements
# about Agricultural Development, Fisheries, Direct Payments and Market Measures.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(lubridate)
library(dplyr)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
library(RPostgreSQL)
library(ggplot2)
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # Loading the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # Creating a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.payments") # Getting data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date) # Converting character to date
mydata<-mydata[order(mydata$date),]
lastdate=max(mydata$date)
header <- dashboardHeader(title = paste0("Πορεία Προγραμμάτων Επιδότησης (τελευταία ημερομηνία ενημέρωσης ",lastdate, ")"),
titleWidth=1000) # Header of dashboard
sidebar <- dashboardSidebar(sidebarMenu(
selectInput('fund', 'Ταμείο', choices = unique(mydata$fund),selected='ΕΓΤΑΑ'),
uiOutput("slider_category"),
uiOutput("slider_measure")),
selectInput('period', 'Ορίζοντας πρόβλεψης (μήνες)', choices = c("6", "12", "18", "24", "30", "36"), selected='12'),
tags$footer(tags$p("Η παρούσα εφαρμογή βασίζεται σε επεξεργασμένα δεδομένα από Δελτία Τύπου του ΟΠΕΚΕΠΕ.
Το agristats.eu δε φέρει καμία ευθύνη για την ποιότητα των πρωτογενών δεδομένων. Πάγια θέση του είναι ότι η
πληροφορία αυτή ειναι δημόσιο αγαθό και πρέπει να προσφέρεται υπό μορφή ανοιχτών επεξεργάσιμων δεδομένων.")))
frow1 <- fluidRow( # Creating row of two diagrams
tabsetPanel(
tabPanel("Χρονική αποτύπωση",dygraphOutput("view_total"),
dygraphOutput("view"),
dataTableOutput("summary"),width='98%'),
tabPanel("Στατιστικά ανά πρόγραμμα",print("Τα εν λόγω στατιστικά αφορούν την επιλεγμένη χρονική περίοδο."),
dateRangeInput("mydate_category", "Ημερομηνία:",min=as.character(min(mydata$date)), max=as.character(max(mydata$date)),
start=as.character(min(mydata$date)),end=as.character(max(mydata$date)), sep=""),
plotOutput("chart_category"), dataTableOutput("data_category"), width='98%'),
tabPanel("Στατιστικά ανά μέτρο",print("Τα εν λόγω στατιστικά αφορούν την επιλεγμένη χρονική περίοδο."),
dateRangeInput("mydate_measure", "Ημερομηνία:",min=as.character(min(mydata$date)), max=as.character(max(mydata$date)),
start=as.character(min(mydata$date)),end=as.character(max(mydata$date)), sep=""),
plotOutput("chart_measure"), dataTableOutput("data_measure"), width='98%'),
tabPanel("Αντιπαραβολή κατ' έτος", plotOutput("fund_per_year"), width='98%'),
tabPanel("Λήψη δεδομένων", downloadButton("downloadData"), width='98%'))
)
fund_per_year<-mydata
fund_per_year$year<-fund_per_year[,c("fund","date", "payment_amount")]
fund_per_year$date<-year(fund_per_year$date)
fund_per_year<-aggregate(fund_per_year$payment_amount,by=list("fund","year"), FUN=sum)
fund_per_year<-mydata
fund_per_year$year<-fund_per_year[,c("fund","date", "payment_amount")]
fund_per_year$date<-year(fund_per_year$date)
fund_per_year<-mydata
fund_per_year$year<-fund_per_year[,c("fund","date", "payment_amount")]
View(fund_per_year)
fund_per_year<-mydata
fund_per_year$year<-fund_per_year[c("fund","date", "payment_amount"),]
View(fund_per_year)
fund_per_year<-mydata
fund_per_year<-fund_per_year[c("fund","date", "payment_amount"),]
fund_per_year$date<-year(fund_per_year$date)
View(fund_per_year)
fund_per_year<-mydata
fund_per_year<-fund_per_year[,c("fund","date", "payment_amount")]
fund_per_year$date<-year(fund_per_year$date)
View(fund_per_year)
runApp('subsidies/gr')
fund_per_year<-mydata
fund_per_year<-fund_per_year[,c("fund","date", "payment_amount")]
fund_per_year$date<-year(fund_per_year$date)
fund_per_year<-aggregate(fund_per_year$payment_amount,by=list("fund","year"), FUN=sum)
runApp('subsidies/gr')
View(fund_per_year)
runApp('subsidies/gr')
fund_per_year<-mydata
fund_per_year<-fund_per_year[,c("fund","date", "payment_amount")]
fund_per_year$date<-year(fund_per_year$date)
fund_per_year<-aggregate(fund_per_year$payment_amount,by=list(c("fund","date")), FUN=sum)
fund_per_year<-mydata
fund_per_year<-fund_per_year[,c("fund","date", "payment_amount")]
fund_per_year$date<-year(fund_per_year$date)
fund_per_year<-aggregate(fund_per_year$payment_amount,by=list("fund","date"), FUN=sum)
View(fund_per_year)
runApp('subsidies/gr')
fund_per_year<-mydata
fund_per_year<-fund_per_year[,c("fund","date", "payment_amount")]
fund_per_year$date<-year(fund_per_year$date)
fund_per_year<-aggregate(fund_per_year$payment_amount,
by=list(fund=fund_per_year$fund,year=fund_per_year$date), FUN=sum)
View(fund_per_year)
ggplot(fund_per_year, aes(x=fund_per_year$fund, y=fund_per_year$x/1000000, fill=fund_per_year$fund))+
geom_bar(width = 1, stat = "identity",position = "dodge") +
theme(legend.title=element_blank()) +
labs(y='Πληρωμές (εκατ. ευρώ)') +
geom_text(aes(label=round(data_per_measure$x/1000000,2)), position=position_dodge(width=0.9), vjust=-0.25) +
theme(axis.text.x=element_blank()) +
theme(axis.title.x = element_blank())
runApp('subsidies/gr')
View(fund_per_year)
runApp('subsidies/gr')
View(fund_per_year)
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
install.packages("stringr")
install.packages("stringr")
shiny::runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
source('~/Dropbox/Website/agristats_applications/dbimporter.R')
runApp('subsidies/gr')
source('~/Dropbox/Website/agristats_applications/dbimporter.R')
runApp('subsidies/gr')
shiny::runApp('subsidies/gr')
library(shiny)
library(shinythemes)
library(lubridate)
library(dplyr)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
library(RPostgreSQL)
library(ggplot2)
library(stringr)
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # Loading the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # Creating a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
text<-readtext("/home/iliastsergoulas/Desktop/Πρόγραμμα Αγροτικής Ανάπτυξης 2014-2020.txt")
text<-read.table("/home/iliastsergoulas/Desktop/Πρόγραμμα Αγροτικής Ανάπτυξης 2014-2020.txt")
test<-read.csv("/home/iliastsergoulas/Desktop/programme.csv")
text<-read.table("/home/iliastsergoulas/Downloads/Πρόγραμμα Αγροτικής Ανάπτυξης 2014-2020.txt")
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv")
View(test)
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv",sep=";")
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv",sep="/")
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv",sep="?")
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv",sep="??")
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv",sep="@")
View(test)
dbDisconnect(con)
dbUnloadDriver(drv)
install.packages("readtext")
library(readtext)
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv")
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv", sep=";")
View(test)
test<-read.csv("/home/iliastsergoulas/Downloads/programme.csv", sep=";")
library(readr)
mystring <- read_file("/home/iliastsergoulas/Downloads/programme.txt")
source('~/Dropbox/Website/shiny/test.R')
View(df)
library(readr)
library(RPostgreSQL)
mystring <- read_file("/home/iliastsergoulas/Downloads/programme.txt")
df <- data.frame(title="Πρόγραμμα Αγροτικής Ανάπτυξης 2014-2020", Date="11/12/2015",
person_gr="Πρόγραμμα Αγροτικής Ανάπτυξης 2014-2020",person_en="Rural Development Programme 2014-2020 - Greece",
text=mystring,url="www.agrotikianaptixi.gr", stringsAsFactors=FALSE)
library(readr)
library(RPostgreSQL)
mystring <- read_file("/home/iliastsergoulas/Downloads/programme.txt")
df <- data.frame(title="Πρόγραμμα Αγροτικής Ανάπτυξης 2014-2020", Date="11/12/2015",
person_gr="Πρόγραμμα Αγροτικής Ανάπτυξης 2014-2020",person_en="Rural Development Programme 2014-2020 - Greece",
text=mystring,url="www.agrotikianaptixi.gr", stringsAsFactors=FALSE)
source('~/Dropbox/Website/shiny/test.R')
View(df)
source('~/Dropbox/Website/shiny/test.R')
shiny::runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
cons<-dbListConnections(PostgreSQL())
for (con in cons){dbDisconnect(conn = )}
for (con in cons){dbDisconnect(con)}
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
# This R script is created as a Shiny application to analyze texts such as speeches, press releases, interviews etc
# regarding the agricultural sector.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/text_analyzer/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(lubridate)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
library(dendextend)
get_data_from_db<-function(x){
drv <- dbDriver("PostgreSQL") # Loading the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # Creating a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
query<-paste0("SELECT * from agriculture.agritexts WHERE person_gr=",x)
mydata <- dbGetQuery(con, query) # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date) # Converting to date
return(mydata)}
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv") # Reading credentials from csv file
drv <- dbDriver("PostgreSQL") # Loading the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # Creating a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mylist <- dbGetQuery(con, "SELECT person_gr FROM agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mystopwords<-c("agronewsgr","για","και","από","των", "οι", "...","ώστε","μέσα", "αυτά","περίπου",
"την","στις","της","του","τον","τους", "τα","να", "τέλος","στιγμή", "ούτε", "μία", "ακόμη","παράδειγμα",
"τις","στους","αύριο","στην","προς", "θα", "ως", "ευρώ","κάτι", "είπε","ενώ","πως","έχω","λένε","κάποια",
"που","στα","κάθε","λέει","στο","στη", "σε", "agrenda","όσο", "πάνω", "δούμε", "κάνει","εμείς","απόφαση",
"ζωντανά","αγρότες","αγροτικής","μήνα", "τη", "φεκ","όχι","μπορεί","εκεί","βεβαίως","καμία","μπορούμε",
"ημέρες","μέρες","στον", "έως", "λόγω", "εκατ","ότι","ήδη", "όλες", "έχω","ακόμα","αυτή","αυτές",
"αγροτικό","ζητά","αλλά","χωρίς", "προ", "ύψους","όλα","όπου", "τσιρώνης", "ίδια", "εγώ","υπάρχουν",
"αγροτικού", "δείτε", "πριν", "πού", "με", "το","πάλι","σημείωσε", "οποία", "κύριο","εάν","χώρο","άνθρωποι",
"πιο", "όλοι", "φωτό","νέα", "δισ", "δεν", "να","μια","άλλων","μόνο","ήταν","αφορά","μόνο","χώρα",
"ειδήσεις","αγροτικές", "μέχρι","μετά","γίνει","έχουν","χώρας","δήλωσε","news","λοιπόν","έτσι","αποτελεί",
"είναι","ανά","νέο","αγροτική","αγροτών","κιλό","https","δόθηκαν","επίσης","μεγάλο","κάνουν","μεγάλη",
"σας","μας","αυτό","έχει","όπως","θέλουν","καθώς","ένα","ελλάδα","είμαστε","δημοσιογράφος","όμως",
"έχουμε","κάνουμε","θέμα","επιπλέον","μην","μου","είτε","στοιχεία","μάλιστα","πρώτη","πρέπει","ένας",
"κατά", "υπό", "πώς", "δις", "όταν", "αποστόλου", "υπουργός", "τότε", "διότι","βάση","είχαμε","δίνει",
"αυτήν","μέσω","χώρου","κυρίως", "μεταξύ","αυτοί","δηλαδή", "ξέρουν","άλλη","σχετικά","οποίες","τρόπο",
"πρώτα","όλη","τώρα","τόνισε","πολύ","οποίο","γιατί","μπορούν","περιοχές","δύο","μιλάμε","κάποιες",
"τόσο","σήμερα","λέω","πληρώσει","ώρα","εδώ","yoleni","μέρα","άλλες","πάρει","εεδ","γιάννης","θέματα",
"γίνεται","άρα","νέας","όλους","ποια","πρώτο","άλλα","θέλω","υπουργέ","συριζα", "θέλω","θέλει","υπάρξει",
"περίοδο","χρόνο", "υπάρχει","τι","αν","κι","σημασία","λπ","περίπτωση","-","yoleni's", "ββ", "ξένοι",
"τομέα","κόσμος","αναπληρωτής","ελληνική","κόσμος","αυτών","πλέον","χρόνια","έρχονται","σχέση","τομέας",
"κάποιος","βλέπουμε","υποστηρίζουμε","δώσουμε","μεγάλες","δε","πάει","κλπ","γι'","κάτω","πίσω","παρά",
"επομένως","αυτός","κόσμο","κύριε","πω","μεγάλα","άλλο","πιστεύω","πάρουν","ας","έναν","είπα","ίδιο","καλά",
"ιδιαίτερα","πούμε","πολλές","μη","πει","μαζί","επειδή","έγινε","γι'","αυτούς","πολλά","πάρα", "αυτούς",
"θέλουμε","κάναμε","θυμίζω","φορά","βοηθήσουμε","είχαν","προκειμένου","πάνε","έχετε","τέτοια","λίγο","είχαν",
"προσπαθούμε","είχε","δημοσιογράφοσ","υπουργόσ","σειρά","αυτού","πάμε","πασεγεσ","όσα","σχεδόν","όλων",
"εκ","κύριος","ενώ","άλλωστε","υπουργείο","διαδικασία","δουλειά","δυο","πραγματικά","υποστηρίξουμε",
"άρθρο","πλαίσιο","καν","σύμφωνα","παράγραφος","υπόψη","στοιχείο","εν","αριθ","αναφέρονται","αφορούν","€",
"σχετικές","βάσει","κανονισμού","εε","σημείο","παα","μέτρου","μέτρων","",
"βλέπε","σύνολο","πίνακας","άρθρου","όσον","|","εντός",
"agronewsgr", "https", "amp", "food", "read", "https","without","bring","usda", "agency","gov","navigation",
"thanks", "look", "looking", "see", "people", "way","fms","hemp","due","information","press","release","releases",
"gaid", "agchattruth", "foodtruth","agchat","want","list","make","range","site","commission","europa","european",
"agriculture","will", "talk", "now", "new", "forget","like","using","ghg","member","policy","search","also",
"farm", "thank", "book", "year", "week", "photo","today","farmers","states","tools","div","gpt","count",
"add", "can", "truths", "life", "news", "every","lelyknowhow","farming","fao","said","wfp","office","america",
"time", "action", "know", "share", "just", "found","always","day","farms","graziano","silva","communities",
"latest", "find", "get", "great", "table", "join", "word", "countries","across","director","program",
"thunderclap", "excited", "better", "voice", "video","use","asa","ahdb","vilsack","secretary","programs",               "paper", "getting", "blogs", "help", "one","unfao","via","...","_",
"best", "animal", "need", "joy", "many", "awesome", "support", "first","million","national","service",
"futureofcap","sacfarmclimate","offers","shows","play","-","means","hort","percent","|","l","state",
"allow","provides","nfutweets","never","century","address","say","since","conservation","opportunity",
"assistance","general","world",
"almost","philhoganeu","farmwildlifeuk","min","nyc","around","devex","xhnews","review")
ui <- fluidPage( # Creating shiny app's UI
theme = shinytheme("spacelab"),
sidebarPanel(
selectInput('person', 'Πρόσωπο/Οργανισμός', choices = unique(mylist$person_gr),
selected="Βαγγέλης Αποστόλου - Υπουργός Αγροτικής Ανάπτυξης και Τροφίμων", multiple=FALSE),
dateRangeInput("mydate", "Ημερομηνία:",min='01/01/2000', max=Sys.Date(),
start='01/01/2000',end=Sys.Date(), sep="")
),
mainPanel(
tabsetPanel(
tabPanel("Wordcloud", plotOutput("view")),
tabPanel("Δενδρόγραμμα", plotOutput("hclust"))
))
)
mydata<-get_data_from_db("Βαγγέλης Αποστόλου - Υπουργός Αγροτικής Ανάπτυξης και Τροφίμων")
mydata.text<-paste(unlist(mydata$text), collapse =" ")
myCorpus <- Corpus(VectorSource(mydata.text)) # Building a corpus
# Creating matrix of texts after "cleaning" them from anything unnecessary
myDtm <- TermDocumentMatrix(myCorpus, control = list(removePunctuation = TRUE,
stopwords = c(mystopwords, stopwords("english")),
removeNumbers = TRUE, tolower = TRUE))
m <- as.matrix(myDtm) # Converting to matrix
v <- sort(rowSums(m), decreasing=TRUE) # Calculating frequency of words
myNames <- names(v) # Getting words
mytext <- data.frame(word=myNames, freq=v) # Creating dataframe with each word and its frequency
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
shiny::runApp('subsidies/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
