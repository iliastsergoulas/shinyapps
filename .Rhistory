dygraph(data_measure$total, main=paste0("Πορεία απορρόφησης: ", input$measure))%>%
dyAxis("y", label = "Πληρωμές", axisLabelFormatter=JS(valueFormatter))%>%
dyRangeSelector(height = 20)
dygraph(data_measure$total, main=paste0("Πορεία απορρόφησης: ", 'input$measure'))%>%
dyAxis("y", label = "Πληρωμές", axisLabelFormatter=JS(valueFormatter))%>%
dyRangeSelector(height = 20)
runApp('subsidies/gr')
View(data_measure)
runApp('subsidies/gr')
runApp('subsidies/gr')
class(data_measure$total)
class(data_total$total)
runApp('subsidies/gr')
runApp('subsidies/gr')
data_measure<-mydata[mydata$measure=='Μεταφορικά νησιών Αιγαίου', c("date", "payment_amount")]
data_measure<-mutate(data_measure, total=cumsum(payment_amount))
data_measure<-data_measure[c("date", "total")]
data_measure<-xts(data_measure, order.by=as.POSIXct(data_measure$date))
data_measure_predicted <- forecast(as.numeric(data_measure$Value), h=as.numeric(input$period))
data_measure_predicted <- data.frame(Date = seq(mdy('06/30/2017'), by = 'months', length.out = as.numeric(input$period)),
Forecast = data_measure_predicted$mean,Hi_95 = data_measure_predicted$upper[,2],
Lo_95 = data_measure_predicted$lower[,2])
data_measure_xts <- xts(data_measure_predicted, order.by = as.POSIXct(data_measure_predicted$Date))
data_measure_predicted <- merge(data_measure, data_measure_xts)
data_measure <- data_measure_predicted[,c("Value", "Forecast", "Hi_95", "Lo_95")]
data_measure
runApp('subsidies/gr')
runApp('subsidies/gr')
print(input$period)
print(class(input$period))
data_measure<-mydata[mydata$measure=='Μεταφορικά νησιών Αιγαίου', c("date", "payment_amount")]
data_measure<-mutate(data_measure, total=cumsum(payment_amount))
data_measure<-data_measure[c("date", "total")]
data_measure<-xts(data_measure, order.by=as.POSIXct(data_measure$date))
data_measure_predicted <- forecast(as.numeric(data_measure$Value), h=as.numeric(input$period))
data_measure<-mydata[mydata$measure=='Μεταφορικά νησιών Αιγαίου', c("date", "payment_amount")]
data_measure<-mutate(data_measure, total=cumsum(payment_amount))
data_measure<-data_measure[c("date", "total")]
data_measure<-xts(data_measure, order.by=as.POSIXct(data_measure$date))
data_measure_predicted <- forecast(as.numeric(data_measure$Value), h=12)
data_measure_predicted <- data.frame(Date = seq(mdy('06/30/2017'), by = 'months', length.out = 12),
Forecast = data_measure_predicted$mean,Hi_95 = data_measure_predicted$upper[,2],
Lo_95 = data_measure_predicted$lower[,2])
data_measure_xts <- xts(data_measure_predicted, order.by = as.POSIXct(data_measure_predicted$Date))
data_measure_predicted <- merge(data_measure, data_measure_xts)
data_measure <- data_measure_predicted[,c("Value", "Forecast", "Hi_95", "Lo_95")]
data_measure
View(data_measure_predicted)
data_measure<-mydata[mydata$measure=='Μεταφορικά νησιών Αιγαίου', c("date", "payment_amount")]
data_measure<-mutate(data_measure, total=cumsum(payment_amount))
data_measure<-data_measure[c("date", "total")]
data_measure<-xts(data_measure, order.by=as.POSIXct(data_measure$date))
View(data_measure)
data_measure_predicted <- forecast(as.numeric(data_measure$Value), h=12)
data_measure<-mydata[mydata$measure=='Μεταφορικά νησιών Αιγαίου', c("date", "payment_amount")]
data_measure<-mutate(data_measure, total=cumsum(payment_amount))
data_measure<-data_measure[c("date", "total")]
data_measure<-xts(data_measure, order.by=as.POSIXct(data_measure$date))
View(data_measure)
runApp('subsidies/gr')
View(data_measure)
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
runApp('subsidies/gr')
# This R script is created as a Shiny application based on processed data from OPEKEPE's announcements
# about Agricultural Development, Fisheries, Direct Payments and Market Measures.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(lubridate)
library(dplyr)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
library(RPostgreSQL)
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.payments") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date) # Converting character to date
mydata<-mydata[order(mydata$date),]
lastdate=max(mydata$date)
runApp('subsidies/gr')
data_measure<-mydata[mydata$measure=='Μεταφορικά νησιών Αιγαίου', c("date", "payment_amount")]
data_measure<-mutate(data_measure, total=cumsum(payment_amount))
data_measure<-data_measure[c("date", "total")]
data_measure<-xts(data_measure, order.by=as.POSIXct(data_measure$date))
data_measure_predicted <- forecast(as.numeric(data_measure$total), h=as.numeric('12'))
data_measure_predicted <- data.frame(Date = seq(mdy('06/30/2017'), by = 'months', length.out = as.numeric('12')),
Forecast = data_measure_predicted$mean,Hi_95 = data_measure_predicted$upper[,2],
Lo_95 = data_measure_predicted$lower[,2])
data_measure_xts <- xts(data_measure_predicted, order.by = as.POSIXct(data_measure_predicted$Date))
data_measure_predicted <- merge(data_measure, data_measure_xts)
data_measure <- data_measure_predicted[,c("total", "Forecast", "Hi_95", "Lo_95")]
data_measure
runApp('subsidies/gr')
View(data_measure_predicted)
source('~/Dropbox/Website/dbimporter.R')
source('~/Dropbox/Website/dbimporter.R')
cons <- dbListConnections(PostgreSQL())
for(con in cons)
dbDisconnect(con)
source('~/Dropbox/Website/dbimporter.R')
shiny::runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
View(mydata)
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
print(max(mydata$date))
print(max(as.Date(mydata$date)))
print(as.Date(mydata$date))
print(class(mydata$date))
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date)
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date)
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date)
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date)
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date)
?dmy
??dmy
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(lubridate)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date)
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(lubridate)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
View(mydata)
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(lubridate)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
View(mydata)
source('~/Dropbox/Website/dbimporter.R')
source('~/Dropbox/Website/dbimporter.R')
source('~/Dropbox/Website/dbimporter.R')
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(lubridate)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
View(mydata)
mydata$date <- dmy(mydata$date)
View(mydata)
library(shiny)
library(shinythemes)
library(wordcloud)
library(tm)
library(base64enc)
library(SnowballC)
library(lubridate)
library(RWeka)
library(rJava)
library(RWekajars)
library(shinydashboard)
library(RPostgreSQL)
credentials<-read.csv("/home/iliastsergoulas/Dropbox/Website/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = '88.99.13.199', port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agritexts") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
View(mydata)
mydata$date <- mdy(mydata$date)
View(mydata)
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
cons <- dbListConnections(PostgreSQL())
for(con in cons)
dbDisconnect(con)
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
View(mydata)
print(s.Date(min(mydata$date)))
print(as.Date(min(mydata$date)))
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer')
shiny::runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
source('~/Dropbox/Website/agristats_applications/dbimporter.R')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/gr')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/en')
runApp('~/Dropbox/Website/agristats_applications/text_analyzer/en')
?fluidpage
?fluidPage
?selectInput
runApp('subsidies/gr')
runApp('subsidies/gr')
shiny::runApp('country/quality_products')
# Data: Quality products (PDO/PGI) in Greece
# This R script is created as a Shiny application to process data
# from Greek Ministry of Agriculture and create plots and maps.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(leaflet)
library(rgdal)
library(maptools)
library(htmltools)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(postGIStools)
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
plants <- get_postgis_query(con, "SELECT * FROM agriculture.eggs")
dbDisconnect(con)
dbUnloadDriver(drv)
plants_edited <- as.data.frame(plants)
plants_per_region <- plants_edited[c("region", "id")]
plants_per_pref <- plants_edited[c("prefecture", "id")]
View(plants_edited)
# Data: Quality products (PDO/PGI) in Greece
# This R script is created as a Shiny application to process data
# from Greek Ministry of Agriculture and create plots and maps.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(leaflet)
library(rgdal)
library(maptools)
library(htmltools)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(postGIStools)
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
plants <- get_postgis_query(con, "SELECT * FROM agriculture.quality_products")
dbDisconnect(con)
dbUnloadDriver(drv)
plants_edited <- as.data.frame(plants)
plants_per_region <- plants_edited[c("region", "id")]
plants_per_pref <- plants_edited[c("prefecture", "id")]
runApp('country/quality_products')
runApp('country/en/quality_products')
shiny::runApp('sector/reforestable_areas')
runApp('sector/reforestable_areas')
source('~/Documents/app.R')
install.packages("shinyjs")
runApp('~/Documents')
runApp('~/Documents')
shiny::runApp('sector/en/horses_elstat')
runApp('sector/horses_elstat')
runApp('sector/en/aquaculture_employment')
runApp('sector/aquaculture_employment')
runApp('sector/en/aquaculture_employment')
runApp('sector/en/aquaculture_employment')
runApp('sector/en/aquaculture_employment')
runApp('sector/en/aquaculture_employment')
runApp('sector/en/aquaculture_employment')
runApp('sector/aquaculture_employment')
runApp('sector/animals_elstat')
# Data: Animals population based on data from Hellenic Statistic Service
# This R script is created as a Shiny application to download raw data from Hellenic Statistical Authority (ELSTAT), ,
# process it and create plots and maps.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinydashboard)
library(shinythemes)
library(googleVis)
library(ggplot2)
library(directlabels)
library(scales)
library(reshape2)
library(RPostgreSQL)
printMoney <- function(x){ # A function to show quantity as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show quantity with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.animal_elstat") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$year<-as.character(mydata$year)
runApp('sector/animals_elstat')
shiny::runApp('sector/animals_elstat')
shiny::runApp('~/Dropbox/Website/agristats_applications/beekeeping')
runApp('~/Dropbox/Website/agristats_applications/beekeeping')
runApp('~/Dropbox/Website/agristats_applications/beekeeping')
runApp('~/Dropbox/Website/agristats_applications/beekeeping')
runApp('~/Dropbox/Website/agristats_applications/beekeeping')
runApp('~/Dropbox/Website/agristats_applications/beekeeping')
runApp('~/Dropbox/Website/agristats_applications/beekeeping')
shiny::runApp('~/Dropbox/Website/agristats_applications/beekeeping')
runApp('sector/wineries')
runApp('wordcloud/gr')
cons <- dbListConnections(PostgreSQL())
for(con in cons)
dbDisconnect(con)
runApp('wordcloud/gr')
runApp('wordcloud/en')
runApp('wordcloud/en')
runApp('wordcloud/en')
runApp('wordcloud/gr')
runApp('wordcloud/en')
runApp('wordcloud/gr')
runApp('wordcloud/gr')
runApp('wordcloud/en')
?removePunctuation
runApp('wordcloud/en')
runApp('wordcloud/en')
runApp('wordcloud/en')
runApp('wordcloud/en')
runApp('sector/wine_production_minagric')
shiny::runApp('sector/wine_production_minagric')
