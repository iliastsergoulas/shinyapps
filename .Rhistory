library(postGIStools)
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
plants <- get_postgis_query(con, "SELECT id FROM agriculture.aromatic",
geom_name = "geom")
# Data: Aromatic plants in Greece
# This R script is created as a Shiny application to process data
# from Greek Ministry of Agriculture and create plots and maps.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(leaflet)
library(rgdal)
library(maptools)
library(htmltools)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(postGIStools)
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
plants <- get_postgis_query(con, "SELECT geom, id FROM agriculture.aromatic",
geom_name = "geom")
runApp('sector/aromatic_plants')
?get_postgis_query
runApp('sector/aromatic_plants')
runApp('sector/aromatic_plants')
runApp('sector/en/aromatic_plants')
runApp('sector/aromatic_plants')
runApp('sector/aromatic_plants')
all_cons <- dbListConnections(MySQL())
for(con in cons)
dbDisconnect(con)
all_cons <- dbListConnections(MySQL())
for(con in all_cons)
dbDisconnect(con)
all_cons <- dbListConnections(PostgreSQL())
for(con in all_cons)
dbDisconnect(con)
runApp('sector/aromatic_plants')
runApp('sector/forest_villages')
runApp('sector/forest_villages')
runApp('sector/forest_villages')
runApp('sector/forest_villages')
runApp('sector/forest_villages')
runApp('sector/forest_villages')
runApp('sector/forest_villages')
runApp('sector/en/forest_villages')
runApp('country/cooperatives')
runApp('country/cooperatives')
runApp('country/cooperatives')
runApp('sector/eggs_plants')
runApp('sector/eggs_plants')
# Data: Eggs plants in Greece
# This R script is created as a Shiny application to process data
# from Greek Ministry of Agriculture and create plots and maps.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(shinythemes)
library(leaflet)
library(rgdal)
library(maptools)
library(htmltools)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(postGIStools)
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
plants <- get_postgis_query(con, "SELECT * FROM agriculture.eggs")
View(plants)
runApp('sector/eggs_plants')
all_cons <- dbListConnections(PostgreSQL())
for(con in all_cons)
dbDisconnect(con)
runApp('sector/eggs_plants')
runApp('sector/en/eggs_plants')
runApp('sector/snails_plants')
runApp('sector/snails_plants')
runApp('sector/snails_plants')
runApp('sector/en/wineries')
runApp('sector/wineries')
runApp('prices/gr')
shiny::runApp('sector/sheep_classes_elstat')
runApp('country/animal_population_eu_country')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(countrycode)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.animal_population_eu_country") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
for (i in 1:nrow(mydata)) { # Replacing country codes in order to get correct country names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
mydata$countryname <- countrycode(mydata$geo, "iso2c", "country.name") # Getting country names
for (i in 1:nrow(mydata)) { # Replacing country codes in order to get correct country names
if(as.character(mydata$geo[i])=="GB") {
mydata$countryname[i] <- "United Kingdom"}}
mydata<-mydata[which(!is.na(mydata$countryname)), c("countryname", "time", "values")] # Filtering for country names not found
colnames(mydata)<-c("country", "year", "number")
meanvalue<-mean((aggregate(mydata$number, by=list(year=mydata$year), FUN=mean)$x)) # Mean value
topc<-mydata[which.max(mydata$number),] # Top country
View(mydata)
View(topc)
class(mydata$number)
aggregate(mydata$number, by=list(year=mydata$year), FUN=mean)$x
runApp('country/animal_population_eu_country')
runApp('country/agri_econ_active_population_wb_country')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agricultural_land_wb_country") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$year<-as.character(mydata$year)
names(mydata)[names(mydata)=="EN.AGR.EMPL"] <- "agri_econ_population"
mydata<-mydata[which(!is.na(mydata$agri_econ_population)),] # Filtering for NA values
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.agricultural_land_wb_country") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$year<-as.character(mydata$year)
names(mydata)[names(mydata)=="EN.AGR.EMPL"] <- "agri_econ_population"
View(mydata)
runApp('country/agri_econ_active_population_wb_country')
runApp('country/agri_econ_active_fem_population_wb_country')
runApp('country/agri_employment_wb_country')
runApp('country/agri_employment_wb_country')
runApp('country/agri_population_persqkm_wb_country')
runApp('country/en/agri_employment_wb_country')
runApp('country/area_eu_cultivated')
runApp('country/en/area_eu_cultivated')
runApp('region/animal_population_eu_region')
runApp('region/animal_population_eu_region')
runApp('region/animal_population_eu_region')
runApp('region/animal_population_eu_region')
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(countrycode)
library(eurostat)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.animal_population_eu_region") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
for (i in 1:nrow(mydata)) { # Replacing region codes in order to get correct region names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
mydata_reg<-label_eurostat(mydata)
mydata$regionname <- mydata_reg$geo
mydata<-mydata[c("regionname", "geo", "time", "values")]
colnames(mydata)<-c("region", "geo", "year", "number")
mydata<-mydata[which(!startsWith(mydata$region, "Euro")),]
mymap<- merge_eurostat_geodata(data = mydata, geocolumn = "geo", # Creating geodata
resolution = "60", all_regions = FALSE, output_class = "df")
mymap$class<-with(mymap, factor(findInterval(number, c(-Inf, # Creating classes out of values
quantile(number, probs=c(0.25, .5, .75)), Inf)),
labels=c("Q1","Q2","Q3","Q4")))
mymap<-mymap[order(mymap$year, decreasing=TRUE),]
View(mymap)
View(mymap)
# Data: Animal population (EU regions)
# This R script is created as a Shiny application processing raw data from Eurostat ((C) EuroGeographics for the administrative boundaries),
# and creating plots and maps as get_eurostat("agr_r_animal", time_format = "raw")
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(countrycode)
library(eurostat)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.animal_population_eu_region") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
for (i in 1:nrow(mydata)) { # Replacing region codes in order to get correct region names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
mydata_reg<-label_eurostat(mydata)
mydata$regionname <- mydata_reg$geo
mydata<-mydata[c("regionname", "geo", "time", "values")]
colnames(mydata)<-c("region", "geo", "year", "number")
View(mydata)
# Data: Animal population (EU regions)
# This R script is created as a Shiny application processing raw data from Eurostat ((C) EuroGeographics for the administrative boundaries),
# and creating plots and maps as get_eurostat("agr_r_animal", time_format = "raw")
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(countrycode)
library(eurostat)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.animal_population_eu_region") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
for (i in 1:nrow(mydata)) { # Replacing region codes in order to get correct region names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
View(mydata)
?label_eurostat
# Data: Animal population (EU regions)
# This R script is created as a Shiny application processing raw data from Eurostat ((C) EuroGeographics for the administrative boundaries),
# and creating plots and maps as get_eurostat("agr_r_animal", time_format = "raw")
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(countrycode)
library(eurostat)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.animal_population_eu_region") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
for (i in 1:nrow(mydata)) { # Replacing region codes in order to get correct region names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
View(mydata)
mydata_reg<-label_eurostat(mydata)
mydata_reg<-label_eurostat(mydata$geo)
mydata_reg<-label_eurostat(mydata, dic='geo')
mydata_reg<-label_eurostat(mydata, dic=geo)
mydata_reg<-label_eurostat(mydata, dic=mydata$geo)
runApp('country/agri_employment_wb_country')
runApp('region/animal_population_eu_region')
# Data: Animal population (EU regions)
# This R script is created as a Shiny application processing raw data from Eurostat ((C) EuroGeographics for the administrative boundaries),
# and creating plots and maps as get_eurostat("agr_r_animal", time_format = "raw")
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(countrycode)
library(eurostat)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.animal_population_eu_region") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
for (i in 1:nrow(mydata)) { # Replacing region codes in order to get correct region names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
mydata_reg<-label_eurostat(mydata)
View(mydata)
class(mydata$geo)
View(mydata)
# Data: Animal population (EU regions)
# This R script is created as a Shiny application processing raw data from Eurostat ((C) EuroGeographics for the administrative boundaries),
# and creating plots and maps as get_eurostat("agr_r_animal", time_format = "raw")
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(googleVis)
library(shinythemes)
library(ggplot2)
library(directlabels)
library(scales)
library(shinydashboard)
library(RPostgreSQL)
library(countrycode)
library(eurostat)
printMoney <- function(x){ # A function to show number as currency
format(x, digits=10, nsmall=2, decimal.mark=",", big.mark=".")
}
specify_decimal <- function(x, k) format(round(x, k), nsmall=k, decimal.mark=",", big.mark=".") # A function to show number with k decimal places
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.animal_population_eu_region") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
View(mydata)
class(mydata$geo)
mydata_reg<-label_eurostat(mydata)
mydata_reg<-label_eurostat(mydata$geo)
install.packages(c("bindrcpp", "forecast"))
source('~/Dropbox/Website/dbimporter.R')
source('~/Dropbox/Website/dbimporter.R')
library(shiny)
library(shinythemes)
library(lubridate)
library(dplyr)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
library(RPostgreSQL)
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.payments") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
View(mydata)
class(mydata$date)
mydata$date <- dmy(mydata$date) # Converting character to date
View(mydata)
source('~/Dropbox/Website/dbimporter.R')
library(shiny)
library(shinythemes)
library(lubridate)
library(dplyr)
library(shinydashboard)
library(forecast)
library(dygraphs)
library(corrplot)
library(xts)
library(htmlwidgets)
library(RPostgreSQL)
valueFormatter<-"function formatValue(v) {
var suffixes = ['', 'χιλ', 'εκατ', 'δις', 'τρις'];
if (v < 1000) return v;
var magnitude = Math.ceil(String(Math.floor(v)).length / 3-1);
if (magnitude > suffixes.length - 1)
magnitude = suffixes.length - 1;
return String(Math.round(v / Math.pow(10, magnitude * 3), 2)) +suffixes[magnitude]}"
credentials<-read.csv("/home/iliastsergoulas/dbcredentials.csv")
drv <- dbDriver("PostgreSQL") # loads the PostgreSQL driver
con <- dbConnect(drv, dbname = as.character(credentials$database), # creates a connection to the postgres database
host = as.character(credentials$host), port = as.character(credentials$port),
user = as.character(credentials$user), password = as.character(credentials$password))
mydata <- dbGetQuery(con, "SELECT * from agriculture.payments") # Get data
dbDisconnect(con)
dbUnloadDriver(drv)
mydata$date <- dmy(mydata$date) # Converting character to date
View(mydata)
runApp('subsidies/gr')
shiny::runApp('sector/apiculture_centres')
runApp('sector/apiculture_centres')
runApp('sector/apiculture_centres')
runApp('sector/en/apiculture_centres')
source('~/Dropbox/Website/dbimporter.R')
source('~/Dropbox/Website/dbimporter.R')
dbDisconnect(con)
source('~/Dropbox/Website/dbimporter.R')
all_cons <- dbListConnections(PostgreSQL())
for(con in cons)
dbDisconnect(con)
all_cons <- dbListConnections(PostgreSQL())
for(con in all_cons)
dbDisconnect(con)
source('~/Dropbox/Website/dbimporter.R')
shiny::runApp('sector/beef_classes_elstat')
source('~/Dropbox/Website/dbimporter.R')
source('~/Dropbox/Website/dbimporter.R')
all_cons <- dbListConnections(PostgreSQL())
for(con in all_cons)
dbDisconnect(con)
source('~/Dropbox/Website/dbimporter.R')
runApp('sector/pork_classes_elstat')
runApp('sector/pork_classes_elstat')
runApp('sector/beef_classes_elstat')
source('~/Dropbox/Website/dbimporter.R')
source('~/Dropbox/Website/dbimporter.R')
all_cons <- dbListConnections(PostgreSQL())
for(con in all_cons)
dbDisconnect(con)
source('~/Dropbox/Website/dbimporter.R')
runApp('sector/honey_beekeepers_minagric')
runApp('sector/en/honey_beekeepers_minagric')
