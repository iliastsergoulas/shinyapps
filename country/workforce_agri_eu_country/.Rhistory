print(p)
})
print(p)
p <- ggplot(data=map.df, aes(long,lat,group=group))
p <- p + geom_polygon(data = map.df, aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641", "#336600"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.40),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "€ per Year",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Disposable household incomes in  2011")
print(p)
runApp('region/milk_production_region')
p <- ggplot(data=map.df, aes(long,lat,group=group))
p <- p + geom_polygon(data = map.df, aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641", "#336600"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.40),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "€ per Year",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Disposable household incomes in  2011")
print(p)
mydata<-get_eurostat("agr_r_milkpr", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$dairyprod=='D1110A' & mydata$milkitem=='PRO' & !is.na(mydata$values)), ]
for (i in 1:nrow(mydata)) {
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
#mydata$countryname <- countrycode(mydata$geo, "region", "country.name")
mydata<-mydata[c("geo", "time", "values")]
colnames(mydata)<-c("geo", "year", "quantity")
map.df <- merge_eurostat_geodata(data = mydata, geocolumn = "geo",
resolution = "60", all_regions = FALSE, output_class = "df")
map.df<-map.df[which(!is.na(map.df$quantity)), ]
map.df$class <- cut(map.df$quantity, 5, labels=c(1:5))
p <- ggplot(data=map.df, aes(long,lat,group=group))
p <- p + geom_polygon(data = map.df, aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641", "#336600"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.40),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "€ per Year",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Disposable household incomes in  2011")
print(p)
runApp('region/milk_production_region')
mydata<-get_eurostat("agr_r_milkpr", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$dairyprod=='D1110A' & nchar(mydata$geo<3)
& mydata$milkitem=='PRO' & !is.na(mydata$values)), ]
for (i in 1:nrow(mydata)) {
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
#mydata$countryname <- countrycode(mydata$geo, "region", "country.name")
mydata<-mydata[c("geo", "time", "values")]
colnames(mydata)<-c("geo", "year", "quantity")
map.df <- merge_eurostat_geodata(data = mydata, geocolumn = "geo",
resolution = "60", all_regions = FALSE, output_class = "df")
map.df<-map.df[which(!is.na(map.df$quantity)), ]
map.df$class<-with(map.df, factor(findInterval(quantity, c(-Inf,
quantile(quantity, probs=c(0.25, .5, .75)), Inf) , na.rm=TRUE),
labels=c("Q1","Q2","Q3","Q4")
))
map.df$class<-with(map.df, factor(findInterval(quantity, c(-Inf,
quantile(quantity, probs=c(0.25, .5, .75)), Inf)),
labels=c("Q1","Q2","Q3","Q4")))
View(map.df)
mydata<-get_eurostat("agr_r_milkpr", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$dairyprod=='D1110A' & nchar(mydata$geo<3)
& mydata$milkitem=='PRO' & !is.na(mydata$values)), ]
for (i in 1:nrow(mydata)) {
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
#mydata$countryname <- countrycode(mydata$geo, "region", "country.name")
mydata<-mydata[c("geo", "time", "values")]
colnames(mydata)<-c("geo", "year", "quantity")
map.df <- merge_eurostat_geodata(data = mydata, geocolumn = "geo",
resolution = "60", all_regions = FALSE, output_class = "df")
map.df$class<-with(map.df, factor(findInterval(quantity, c(-Inf,
quantile(quantity, probs=c(0.25, .5, .75)), Inf)),
labels=c("Q1","Q2","Q3","Q4")))
p <- ggplot(data=map.df, aes(long,lat,group=group))
p <- p + geom_polygon(data = map.df, aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641", "#336600"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.40),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "€ per Year",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Disposable household incomes in  2011")
print(p)
View(map.df)
mydata<-get_eurostat("agr_r_milkpr", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$dairyprod=='D1110A' & nchar(mydata$geo>2)
& mydata$milkitem=='PRO' & !is.na(mydata$values)), ]
for (i in 1:nrow(mydata)) {
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
#mydata$countryname <- countrycode(mydata$geo, "region", "country.name")
mydata<-mydata[c("geo", "time", "values")]
colnames(mydata)<-c("geo", "year", "quantity")
map.df <- merge_eurostat_geodata(data = mydata, geocolumn = "geo",
resolution = "60", all_regions = FALSE, output_class = "df")
map.df$class<-with(map.df, factor(findInterval(quantity, c(-Inf,
quantile(quantity, probs=c(0.25, .5, .75)), Inf)),
labels=c("Q1","Q2","Q3","Q4")))
p <- ggplot(data=map.df, aes(long,lat,group=group))
p <- p + geom_polygon(data = map.df, aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641", "#336600"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.40),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "€ per Year",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Disposable household incomes in  2011")
print(p)
View(map.df)
mydata<-get_eurostat("agr_r_milkpr", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(nchar(mydata$geo>2))), ]
mydata<-get_eurostat("agr_r_milkpr", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(nchar(mydata$geo>2)), ]
mydata<-get_eurostat("agr_r_milkpr", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$dairyprod=='D1110A' & nchar(mydata$geo)>2
& mydata$milkitem=='PRO' & !is.na(mydata$values)), ]
for (i in 1:nrow(mydata)) {
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
#mydata$countryname <- countrycode(mydata$geo, "region", "country.name")
mydata<-mydata[c("geo", "time", "values")]
colnames(mydata)<-c("geo", "year", "quantity")
map.df <- merge_eurostat_geodata(data = mydata, geocolumn = "geo",
resolution = "60", all_regions = FALSE, output_class = "df")
map.df$class<-with(map.df, factor(findInterval(quantity, c(-Inf,
quantile(quantity, probs=c(0.25, .5, .75)), Inf)),
labels=c("Q1","Q2","Q3","Q4")))
p <- ggplot(data=map.df, aes(long,lat,group=group))
p <- p + geom_polygon(data = map.df, aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641", "#336600"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.40),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "€ per Year",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Disposable household incomes in  2011")
print(p)
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
View(map.df)
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
data_year<-map.df[map.df$year==2013,  c("geo", "quantity")]
data_year<-aggregate(data_year$quantity, by=list(Country=data_year$country), FUN=sum)
colnames(data_year)<-c("Χώρα", "Παραγωγή")
runApp('region/milk_production_region')
runApp('region/milk_production_region')
data_year<-map.df[map.df$year==2013]
View(map.df)
View(map.df)
data_year<-map.df[map.df$year=="2013"]
ψολθμνσ(μαπ.δφ)
columns(map.df)
cols(map.df)
class(map.df)
dim(map.df)
colnames(map.df)
View(data_year)
View(mydata)
View(map.df)
data_year<-map.df[map.df$year=="2013"]
print(map.df$year))
print(map.df$year)
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
data_year<-map.df[map.df$year=="2013"]
runApp('region/milk_production_region')
runApp('country/milk_production_country')
p <- ggplot(data=data_year(), aes(long,lat,group=group))
p <- p + geom_polygon(data = data_year(), aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641", "#336600"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.40),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "Τόνοι γάλακτος",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Παραγωγή γάλακτος")
print(p)
runApp('region/milk_production_region')
p <- ggplot(data=data_year(), aes(long,lat,group=group))
p <- p + geom_polygon(data = data_year(), aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d0ed6a","#a0b74e","#7a8c3c","#4e5925","#333a18"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.40),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "Τόνοι γάλακτος",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Παραγωγή γάλακτος")
print(p)
p <- ggplot(data=data_year(), aes(long,lat,group=group))
p <- p + geom_polygon(data = data_year(), aes(long,lat),fill=NA,colour="white",size = 1)
p <- p + geom_polygon(aes(fill = class),colour="dim grey",size=.2)
p <- p + scale_fill_manual(values=c("#d0ed6a","#a0b74e","#7a8c3c","#4e5925","#333a18"))
p <- p + coord_map(project="orthographic", xlim=c(-22,34), ylim=c(35,70))
p <- p +  theme(legend.position = c(0.1,0.50),
legend.justification=c(0,0),
legend.key.size=unit(6,'mm'),
legend.direction = "vertical",
legend.background=element_rect(colour=NA, fill=alpha("white", 2/3)),
legend.text=element_text(size=12),
legend.title=element_text(size=12),
title=element_text(size=16),
panel.background = element_blank(),
plot.background = element_blank(),
panel.grid.minor = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
panel.grid.major = element_line(colour = 'Grey80', size = .5, linetype = 'solid'),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(-3,-1.5, -3, -1.5), "cm"))
p <- p + guides(fill = guide_legend(title = "Τόνοι γάλακτος",
title.position = "top",
title.hjust=0))
p <- p + labs(title = "Παραγωγή γάλακτος")
print(p)
mydata<-get_eurostat("agr_r_milkpr", time_format = "raw")
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$dairyprod=='D1110A' & nchar(mydata$geo)>3
& mydata$milkitem=='PRO' & !is.na(mydata$values)), ]
for (i in 1:nrow(mydata)) {
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
#mydata$countryname <- countrycode(mydata$geo, "region", "country.name")
mydata<-mydata[c("geo", "time", "values")]
colnames(mydata)<-c("geo", "year", "quantity")
mymap<- merge_eurostat_geodata(data = mydata, geocolumn = "geo",
resolution = "60", all_regions = FALSE, output_class = "df")
mymap$class<-with(mymap, factor(findInterval(quantity, c(-Inf,
quantile(quantity, probs=c(0.25, .5, .75)), Inf)),
labels=c("Q1","Q2","Q3","Q4")))
View(mymap)
data_year<-mymap[mymap$year=="2013"]
data_year<-aggregate(data_year$quantity, by=list(Country=data_year$geo), FUN=mean)
data_year<-mymap[which(mymap$year=="2013"),]
data_year<-aggregate(data_year$quantity, by=list(Country=data_year$geo), FUN=mean)
View(data_year)
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
?ορδερ
?order
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
?coord_map
runApp('region/milk_production_region')
runApp('region/milk_production_region')
shiny::runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
runApp('region/milk_production_region')
shiny::runApp('sector/eggs_plants')
install.packages("leaflet")
runApp('sector/eggs_plants')
# This R script is created as a Shiny application to download raw data from Eurostat ((C) EuroGeographics for the administrative boundaries),
# process it and create plots and maps.
# The code is available under MIT license, as stipulated in https://github.com/iliastsergoulas/shinyapps/blob/master/LICENSE.
# Author: Ilias Tsergoulas, Website: www.agristats.eu
library(shiny)
library(googleVis)
library(shinythemes)
library(eurostat)
library(countrycode)
mydata<-get_eurostat("aact_ali01", time_format = "raw") # Downloading raw data from Eurostat
mydata$geo<-as.character(mydata$geo)
mydata<-mydata[which(mydata$itm_newa=='40000'), ] # Filtering data
for (i in 1:nrow(mydata)) { # Replacing country codes in order to get correct country names
if(as.character(mydata$geo[i])=="EL") {
mydata$geo[i] <- "GR"}
if(as.character(mydata$geo[i])=="UK") {
mydata$geo[i] <- "GB"}}
mydata$countryname <- countrycode(mydata$geo, "iso2c", "country.name") # Getting country names
mydata<-mydata[which(!is.na(mydata$countryname)), c("countryname", "time", "values")] # Filtering for country names not found
colnames(mydata)<-c("country", "year", "number")
data_year <- reactive({ # Add reactive data information
data_year<-mydata[mydata$year==2015,  c("country", "number")]
data_year<-aggregate(data_year$number, by=list(Country=data_year$country), FUN=sum)
colnames(data_year)<-c("Χώρα", "Μέγεθος αγροτικής απασχόλησης")
data_year
})
data_year<-mydata[mydata$year==2015,  c("country", "number")]
data_year<-aggregate(data_year$number, by=list(Country=data_year$country), FUN=sum)
colnames(data_year)<-c("Χώρα", "Μέγεθος αγροτικής απασχόλησης")
data_year
geomap <- gvisGeoChart(data_year(), "Χώρα", "Μέγεθος αγροτικής απασχόλησης",
options=list(region="150", displayMode="regions",
datamode='regions',width=700, height=600))
geomap <- gvisGeoChart(data_year, "Χώρα", "Μέγεθος αγροτικής απασχόλησης",
options=list(region="150", displayMode="regions",
datamode='regions',width=700, height=600))
})
geomap <- gvisGeoChart(data_year, "Χώρα", "Μέγεθος αγροτικής απασχόλησης",
options=list(region="150", displayMode="regions",
datamode='regions',width=700, height=600))
print(geomap)
plot(geomap)
runApp('country/workforce_agri_eu_country')
png()
plot(geomap)
dev.off()
png(filename="~/name.png")
plot(geomap)
dev.off()
dev.print(pdf, 'filename.pdf')
plot(geomap)
dev.print(pdf, 'filename.pdf')
runApp('country/workforce_agri_eu_country')
geomap <- gvisGeoChart(data_year(), "Χώρα", "Μέγεθος αγροτικής απασχόλησης",
options=list(region="150", displayMode="regions",
datamode='regions',width=700, height=600))
geomap <- gvisGeoChart(data_year, "Χώρα", "Μέγεθος αγροτικής απασχόλησης",
options=list(region="150", displayMode="regions",
datamode='regions',width=700, height=600))
plot(geomap)
runApp('country/workforce_agri_eu_country')
warnings()
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
?ggsave
??ggsave
runApp('country/workforce_agri_eu_country')
?plotInput
??plotInput
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
runApp('country/workforce_agri_eu_country')
